// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: amessage.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_amessage_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_amessage_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_amessage_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_amessage_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_amessage_2eproto;
namespace test {
namespace protobuf {
namespace cpp {
class AMessage;
struct AMessageDefaultTypeInternal;
extern AMessageDefaultTypeInternal _AMessage_default_instance_;
class PointCloud;
struct PointCloudDefaultTypeInternal;
extern PointCloudDefaultTypeInternal _PointCloud_default_instance_;
class PointField;
struct PointFieldDefaultTypeInternal;
extern PointFieldDefaultTypeInternal _PointField_default_instance_;
class Submessage1;
struct Submessage1DefaultTypeInternal;
extern Submessage1DefaultTypeInternal _Submessage1_default_instance_;
class Submessage2;
struct Submessage2DefaultTypeInternal;
extern Submessage2DefaultTypeInternal _Submessage2_default_instance_;
}  // namespace cpp
}  // namespace protobuf
}  // namespace test
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace test {
namespace protobuf {
namespace cpp {

// ===================================================================


// -------------------------------------------------------------------

class Submessage2 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:test.protobuf.cpp.Submessage2) */ {
 public:
  inline Submessage2() : Submessage2(nullptr) {}
  ~Submessage2() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Submessage2(
      ::google::protobuf::internal::ConstantInitialized);

  inline Submessage2(const Submessage2& from) : Submessage2(nullptr, from) {}
  inline Submessage2(Submessage2&& from) noexcept
      : Submessage2(nullptr, std::move(from)) {}
  inline Submessage2& operator=(const Submessage2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Submessage2& operator=(Submessage2&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Submessage2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Submessage2* internal_default_instance() {
    return reinterpret_cast<const Submessage2*>(
        &_Submessage2_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Submessage2& a, Submessage2& b) { a.Swap(&b); }
  inline void Swap(Submessage2* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Submessage2* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Submessage2* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Submessage2>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Submessage2& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Submessage2& from) { Submessage2::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Submessage2* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "test.protobuf.cpp.Submessage2"; }

 protected:
  explicit Submessage2(::google::protobuf::Arena* arena);
  Submessage2(::google::protobuf::Arena* arena, const Submessage2& from);
  Submessage2(::google::protobuf::Arena* arena, Submessage2&& from) noexcept
      : Submessage2(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value() ;
  ::int32_t value() const;
  void set_value(::int32_t value);

  private:
  ::int32_t _internal_value() const;
  void _internal_set_value(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:test.protobuf.cpp.Submessage2)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_amessage_2eproto;
};
// -------------------------------------------------------------------

class Submessage1 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:test.protobuf.cpp.Submessage1) */ {
 public:
  inline Submessage1() : Submessage1(nullptr) {}
  ~Submessage1() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Submessage1(
      ::google::protobuf::internal::ConstantInitialized);

  inline Submessage1(const Submessage1& from) : Submessage1(nullptr, from) {}
  inline Submessage1(Submessage1&& from) noexcept
      : Submessage1(nullptr, std::move(from)) {}
  inline Submessage1& operator=(const Submessage1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Submessage1& operator=(Submessage1&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Submessage1& default_instance() {
    return *internal_default_instance();
  }
  static inline const Submessage1* internal_default_instance() {
    return reinterpret_cast<const Submessage1*>(
        &_Submessage1_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Submessage1& a, Submessage1& b) { a.Swap(&b); }
  inline void Swap(Submessage1* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Submessage1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Submessage1* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Submessage1>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Submessage1& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Submessage1& from) { Submessage1::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Submessage1* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "test.protobuf.cpp.Submessage1"; }

 protected:
  explicit Submessage1(::google::protobuf::Arena* arena);
  Submessage1(::google::protobuf::Arena* arena, const Submessage1& from);
  Submessage1(::google::protobuf::Arena* arena, Submessage1&& from) noexcept
      : Submessage1(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value() ;
  ::int32_t value() const;
  void set_value(::int32_t value);

  private:
  ::int32_t _internal_value() const;
  void _internal_set_value(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:test.protobuf.cpp.Submessage1)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_amessage_2eproto;
};
// -------------------------------------------------------------------

class PointField final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:test.protobuf.cpp.PointField) */ {
 public:
  inline PointField() : PointField(nullptr) {}
  ~PointField() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PointField(
      ::google::protobuf::internal::ConstantInitialized);

  inline PointField(const PointField& from) : PointField(nullptr, from) {}
  inline PointField(PointField&& from) noexcept
      : PointField(nullptr, std::move(from)) {}
  inline PointField& operator=(const PointField& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointField& operator=(PointField&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointField& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointField* internal_default_instance() {
    return reinterpret_cast<const PointField*>(
        &_PointField_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(PointField& a, PointField& b) { a.Swap(&b); }
  inline void Swap(PointField* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointField* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointField* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PointField>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PointField& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PointField& from) { PointField::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PointField* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "test.protobuf.cpp.PointField"; }

 protected:
  explicit PointField(::google::protobuf::Arena* arena);
  PointField(::google::protobuf::Arena* arena, const PointField& from);
  PointField(::google::protobuf::Arena* arena, PointField&& from) noexcept
      : PointField(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kTimeFieldNumber = 1,
    kIntensityFieldNumber = 8,
    kDistanceFieldNumber = 5,
    kPitchFieldNumber = 6,
    kYawFieldNumber = 7,
    kRingFieldNumber = 9,
  };
  // optional double x = 2;
  bool has_x() const;
  void clear_x() ;
  double x() const;
  void set_x(double value);

  private:
  double _internal_x() const;
  void _internal_set_x(double value);

  public:
  // optional double y = 3;
  bool has_y() const;
  void clear_y() ;
  double y() const;
  void set_y(double value);

  private:
  double _internal_y() const;
  void _internal_set_y(double value);

  public:
  // optional double z = 4;
  bool has_z() const;
  void clear_z() ;
  double z() const;
  void set_z(double value);

  private:
  double _internal_z() const;
  void _internal_set_z(double value);

  public:
  // optional uint32 time = 1;
  bool has_time() const;
  void clear_time() ;
  ::uint32_t time() const;
  void set_time(::uint32_t value);

  private:
  ::uint32_t _internal_time() const;
  void _internal_set_time(::uint32_t value);

  public:
  // optional uint32 intensity = 8;
  bool has_intensity() const;
  void clear_intensity() ;
  ::uint32_t intensity() const;
  void set_intensity(::uint32_t value);

  private:
  ::uint32_t _internal_intensity() const;
  void _internal_set_intensity(::uint32_t value);

  public:
  // optional double distance = 5;
  bool has_distance() const;
  void clear_distance() ;
  double distance() const;
  void set_distance(double value);

  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);

  public:
  // optional double pitch = 6;
  bool has_pitch() const;
  void clear_pitch() ;
  double pitch() const;
  void set_pitch(double value);

  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);

  public:
  // optional double yaw = 7;
  bool has_yaw() const;
  void clear_yaw() ;
  double yaw() const;
  void set_yaw(double value);

  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);

  public:
  // optional uint32 ring = 9;
  bool has_ring() const;
  void clear_ring() ;
  ::uint32_t ring() const;
  void set_ring(::uint32_t value);

  private:
  ::uint32_t _internal_ring() const;
  void _internal_set_ring(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:test.protobuf.cpp.PointField)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    double x_;
    double y_;
    double z_;
    ::uint32_t time_;
    ::uint32_t intensity_;
    double distance_;
    double pitch_;
    double yaw_;
    ::uint32_t ring_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_amessage_2eproto;
};
// -------------------------------------------------------------------

class PointCloud final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:test.protobuf.cpp.PointCloud) */ {
 public:
  inline PointCloud() : PointCloud(nullptr) {}
  ~PointCloud() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PointCloud(
      ::google::protobuf::internal::ConstantInitialized);

  inline PointCloud(const PointCloud& from) : PointCloud(nullptr, from) {}
  inline PointCloud(PointCloud&& from) noexcept
      : PointCloud(nullptr, std::move(from)) {}
  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud& operator=(PointCloud&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointCloud& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointCloud* internal_default_instance() {
    return reinterpret_cast<const PointCloud*>(
        &_PointCloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(PointCloud& a, PointCloud& b) { a.Swap(&b); }
  inline void Swap(PointCloud* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointCloud* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PointCloud>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PointCloud& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PointCloud& from) { PointCloud::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PointCloud* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "test.protobuf.cpp.PointCloud"; }

 protected:
  explicit PointCloud(::google::protobuf::Arena* arena);
  PointCloud(::google::protobuf::Arena* arena, const PointCloud& from);
  PointCloud(::google::protobuf::Arena* arena, PointCloud&& from) noexcept
      : PointCloud(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPointsFieldNumber = 5,
    kHeightFieldNumber = 1,
    kWidthFieldNumber = 2,
    kPointStepFieldNumber = 3,
    kRowStepFieldNumber = 4,
  };
  // repeated .test.protobuf.cpp.PointField points = 5;
  int points_size() const;
  private:
  int _internal_points_size() const;

  public:
  void clear_points() ;
  ::test::protobuf::cpp::PointField* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField<::test::protobuf::cpp::PointField>* mutable_points();

  private:
  const ::google::protobuf::RepeatedPtrField<::test::protobuf::cpp::PointField>& _internal_points() const;
  ::google::protobuf::RepeatedPtrField<::test::protobuf::cpp::PointField>* _internal_mutable_points();
  public:
  const ::test::protobuf::cpp::PointField& points(int index) const;
  ::test::protobuf::cpp::PointField* add_points();
  const ::google::protobuf::RepeatedPtrField<::test::protobuf::cpp::PointField>& points() const;
  // optional uint32 height = 1;
  bool has_height() const;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // optional uint32 width = 2;
  bool has_width() const;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // optional uint32 point_step = 3;
  bool has_point_step() const;
  void clear_point_step() ;
  ::uint32_t point_step() const;
  void set_point_step(::uint32_t value);

  private:
  ::uint32_t _internal_point_step() const;
  void _internal_set_point_step(::uint32_t value);

  public:
  // optional uint32 row_step = 4;
  bool has_row_step() const;
  void clear_row_step() ;
  ::uint32_t row_step() const;
  void set_row_step(::uint32_t value);

  private:
  ::uint32_t _internal_row_step() const;
  void _internal_set_row_step(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:test.protobuf.cpp.PointCloud)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::test::protobuf::cpp::PointField > points_;
    ::uint32_t height_;
    ::uint32_t width_;
    ::uint32_t point_step_;
    ::uint32_t row_step_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_amessage_2eproto;
};
// -------------------------------------------------------------------

class AMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:test.protobuf.cpp.AMessage) */ {
 public:
  inline AMessage() : AMessage(nullptr) {}
  ~AMessage() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline AMessage(const AMessage& from) : AMessage(nullptr, from) {}
  inline AMessage(AMessage&& from) noexcept
      : AMessage(nullptr, std::move(from)) {}
  inline AMessage& operator=(const AMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AMessage& operator=(AMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AMessage* internal_default_instance() {
    return reinterpret_cast<const AMessage*>(
        &_AMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AMessage& a, AMessage& b) { a.Swap(&b); }
  inline void Swap(AMessage* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AMessage& from) { AMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AMessage* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "test.protobuf.cpp.AMessage"; }

 protected:
  explicit AMessage(::google::protobuf::Arena* arena);
  AMessage(::google::protobuf::Arena* arena, const AMessage& from);
  AMessage(::google::protobuf::Arena* arena, AMessage&& from) noexcept
      : AMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCFieldNumber = 3,
    kDFieldNumber = 4,
    kGFieldNumber = 7,
    kEFieldNumber = 5,
    kFFieldNumber = 6,
    kAFieldNumber = 1,
    kBFieldNumber = 2,
  };
  // repeated int32 c = 3;
  int c_size() const;
  private:
  int _internal_c_size() const;

  public:
  void clear_c() ;
  ::int32_t c(int index) const;
  void set_c(int index, ::int32_t value);
  void add_c(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& c() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_c();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_c() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_c();

  public:
  // repeated string d = 4;
  int d_size() const;
  private:
  int _internal_d_size() const;

  public:
  void clear_d() ;
  const std::string& d(int index) const;
  std::string* mutable_d(int index);
  void set_d(int index, const std::string& value);
  void set_d(int index, std::string&& value);
  void set_d(int index, const char* value);
  void set_d(int index, const char* value, std::size_t size);
  void set_d(int index, absl::string_view value);
  std::string* add_d();
  void add_d(const std::string& value);
  void add_d(std::string&& value);
  void add_d(const char* value);
  void add_d(const char* value, std::size_t size);
  void add_d(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& d() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_d();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_d() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_d();

  public:
  // repeated .test.protobuf.cpp.Submessage2 g = 7;
  int g_size() const;
  private:
  int _internal_g_size() const;

  public:
  void clear_g() ;
  ::test::protobuf::cpp::Submessage2* mutable_g(int index);
  ::google::protobuf::RepeatedPtrField<::test::protobuf::cpp::Submessage2>* mutable_g();

  private:
  const ::google::protobuf::RepeatedPtrField<::test::protobuf::cpp::Submessage2>& _internal_g() const;
  ::google::protobuf::RepeatedPtrField<::test::protobuf::cpp::Submessage2>* _internal_mutable_g();
  public:
  const ::test::protobuf::cpp::Submessage2& g(int index) const;
  ::test::protobuf::cpp::Submessage2* add_g();
  const ::google::protobuf::RepeatedPtrField<::test::protobuf::cpp::Submessage2>& g() const;
  // bytes e = 5;
  void clear_e() ;
  const std::string& e() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_e(Arg_&& arg, Args_... args);
  std::string* mutable_e();
  PROTOBUF_NODISCARD std::string* release_e();
  void set_allocated_e(std::string* value);

  private:
  const std::string& _internal_e() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_e(
      const std::string& value);
  std::string* _internal_mutable_e();

  public:
  // optional .test.protobuf.cpp.Submessage1 f = 6;
  bool has_f() const;
  void clear_f() ;
  const ::test::protobuf::cpp::Submessage1& f() const;
  PROTOBUF_NODISCARD ::test::protobuf::cpp::Submessage1* release_f();
  ::test::protobuf::cpp::Submessage1* mutable_f();
  void set_allocated_f(::test::protobuf::cpp::Submessage1* value);
  void unsafe_arena_set_allocated_f(::test::protobuf::cpp::Submessage1* value);
  ::test::protobuf::cpp::Submessage1* unsafe_arena_release_f();

  private:
  const ::test::protobuf::cpp::Submessage1& _internal_f() const;
  ::test::protobuf::cpp::Submessage1* _internal_mutable_f();

  public:
  // int32 a = 1;
  void clear_a() ;
  ::int32_t a() const;
  void set_a(::int32_t value);

  private:
  ::int32_t _internal_a() const;
  void _internal_set_a(::int32_t value);

  public:
  // optional int32 b = 2;
  bool has_b() const;
  void clear_b() ;
  ::int32_t b() const;
  void set_b(::int32_t value);

  private:
  ::int32_t _internal_b() const;
  void _internal_set_b(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:test.protobuf.cpp.AMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      36, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> c_;
    mutable ::google::protobuf::internal::CachedSize _c_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField<std::string> d_;
    ::google::protobuf::RepeatedPtrField< ::test::protobuf::cpp::Submessage2 > g_;
    ::google::protobuf::internal::ArenaStringPtr e_;
    ::test::protobuf::cpp::Submessage1* f_;
    ::int32_t a_;
    ::int32_t b_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_amessage_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Submessage1

// int32 value = 1;
inline void Submessage1::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = 0;
}
inline ::int32_t Submessage1::value() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.Submessage1.value)
  return _internal_value();
}
inline void Submessage1::set_value(::int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.Submessage1.value)
}
inline ::int32_t Submessage1::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void Submessage1::_internal_set_value(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// Submessage2

// int32 value = 1;
inline void Submessage2::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = 0;
}
inline ::int32_t Submessage2::value() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.Submessage2.value)
  return _internal_value();
}
inline void Submessage2::set_value(::int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.Submessage2.value)
}
inline ::int32_t Submessage2::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void Submessage2::_internal_set_value(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// AMessage

// int32 a = 1;
inline void AMessage::clear_a() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.a_ = 0;
}
inline ::int32_t AMessage::a() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.AMessage.a)
  return _internal_a();
}
inline void AMessage::set_a(::int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.AMessage.a)
}
inline ::int32_t AMessage::_internal_a() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.a_;
}
inline void AMessage::_internal_set_a(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.a_ = value;
}

// optional int32 b = 2;
inline bool AMessage::has_b() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AMessage::clear_b() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.b_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t AMessage::b() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.AMessage.b)
  return _internal_b();
}
inline void AMessage::set_b(::int32_t value) {
  _internal_set_b(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.AMessage.b)
}
inline ::int32_t AMessage::_internal_b() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.b_;
}
inline void AMessage::_internal_set_b(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.b_ = value;
}

// repeated int32 c = 3;
inline int AMessage::_internal_c_size() const {
  return _internal_c().size();
}
inline int AMessage::c_size() const {
  return _internal_c_size();
}
inline void AMessage::clear_c() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.c_.Clear();
}
inline ::int32_t AMessage::c(int index) const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.AMessage.c)
  return _internal_c().Get(index);
}
inline void AMessage::set_c(int index, ::int32_t value) {
  _internal_mutable_c()->Set(index, value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.AMessage.c)
}
inline void AMessage::add_c(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_c()->Add(value);
  // @@protoc_insertion_point(field_add:test.protobuf.cpp.AMessage.c)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& AMessage::c() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:test.protobuf.cpp.AMessage.c)
  return _internal_c();
}
inline ::google::protobuf::RepeatedField<::int32_t>* AMessage::mutable_c()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:test.protobuf.cpp.AMessage.c)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_c();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
AMessage::_internal_c() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.c_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* AMessage::_internal_mutable_c() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.c_;
}

// repeated string d = 4;
inline int AMessage::_internal_d_size() const {
  return _internal_d().size();
}
inline int AMessage::d_size() const {
  return _internal_d_size();
}
inline void AMessage::clear_d() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.d_.Clear();
}
inline std::string* AMessage::add_d()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_d()->Add();
  // @@protoc_insertion_point(field_add_mutable:test.protobuf.cpp.AMessage.d)
  return _s;
}
inline const std::string& AMessage::d(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.AMessage.d)
  return _internal_d().Get(index);
}
inline std::string* AMessage::mutable_d(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:test.protobuf.cpp.AMessage.d)
  return _internal_mutable_d()->Mutable(index);
}
inline void AMessage::set_d(int index, const std::string& value) {
  _internal_mutable_d()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.AMessage.d)
}
inline void AMessage::set_d(int index, std::string&& value) {
  _internal_mutable_d()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.AMessage.d)
}
inline void AMessage::set_d(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_d()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test.protobuf.cpp.AMessage.d)
}
inline void AMessage::set_d(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_d()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.protobuf.cpp.AMessage.d)
}
inline void AMessage::set_d(int index, absl::string_view value) {
  _internal_mutable_d()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:test.protobuf.cpp.AMessage.d)
}
inline void AMessage::add_d(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_d()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:test.protobuf.cpp.AMessage.d)
}
inline void AMessage::add_d(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_d()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:test.protobuf.cpp.AMessage.d)
}
inline void AMessage::add_d(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_d()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test.protobuf.cpp.AMessage.d)
}
inline void AMessage::add_d(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_d()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test.protobuf.cpp.AMessage.d)
}
inline void AMessage::add_d(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_d()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:test.protobuf.cpp.AMessage.d)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AMessage::d() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:test.protobuf.cpp.AMessage.d)
  return _internal_d();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AMessage::mutable_d() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:test.protobuf.cpp.AMessage.d)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_d();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AMessage::_internal_d() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.d_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AMessage::_internal_mutable_d() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.d_;
}

// bytes e = 5;
inline void AMessage::clear_e() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.e_.ClearToEmpty();
}
inline const std::string& AMessage::e() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.AMessage.e)
  return _internal_e();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AMessage::set_e(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.e_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.AMessage.e)
}
inline std::string* AMessage::mutable_e() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_e();
  // @@protoc_insertion_point(field_mutable:test.protobuf.cpp.AMessage.e)
  return _s;
}
inline const std::string& AMessage::_internal_e() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.e_.Get();
}
inline void AMessage::_internal_set_e(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.e_.Set(value, GetArena());
}
inline std::string* AMessage::_internal_mutable_e() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.e_.Mutable( GetArena());
}
inline std::string* AMessage::release_e() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:test.protobuf.cpp.AMessage.e)
  return _impl_.e_.Release();
}
inline void AMessage::set_allocated_e(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.e_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.e_.IsDefault()) {
          _impl_.e_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test.protobuf.cpp.AMessage.e)
}

// optional .test.protobuf.cpp.Submessage1 f = 6;
inline bool AMessage::has_f() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_ != nullptr);
  return value;
}
inline void AMessage::clear_f() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.f_ != nullptr) _impl_.f_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::test::protobuf::cpp::Submessage1& AMessage::_internal_f() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::test::protobuf::cpp::Submessage1* p = _impl_.f_;
  return p != nullptr ? *p : reinterpret_cast<const ::test::protobuf::cpp::Submessage1&>(::test::protobuf::cpp::_Submessage1_default_instance_);
}
inline const ::test::protobuf::cpp::Submessage1& AMessage::f() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.AMessage.f)
  return _internal_f();
}
inline void AMessage::unsafe_arena_set_allocated_f(::test::protobuf::cpp::Submessage1* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_);
  }
  _impl_.f_ = reinterpret_cast<::test::protobuf::cpp::Submessage1*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test.protobuf.cpp.AMessage.f)
}
inline ::test::protobuf::cpp::Submessage1* AMessage::release_f() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::test::protobuf::cpp::Submessage1* released = _impl_.f_;
  _impl_.f_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::test::protobuf::cpp::Submessage1* AMessage::unsafe_arena_release_f() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:test.protobuf.cpp.AMessage.f)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::test::protobuf::cpp::Submessage1* temp = _impl_.f_;
  _impl_.f_ = nullptr;
  return temp;
}
inline ::test::protobuf::cpp::Submessage1* AMessage::_internal_mutable_f() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.f_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::test::protobuf::cpp::Submessage1>(GetArena());
    _impl_.f_ = reinterpret_cast<::test::protobuf::cpp::Submessage1*>(p);
  }
  return _impl_.f_;
}
inline ::test::protobuf::cpp::Submessage1* AMessage::mutable_f() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::test::protobuf::cpp::Submessage1* _msg = _internal_mutable_f();
  // @@protoc_insertion_point(field_mutable:test.protobuf.cpp.AMessage.f)
  return _msg;
}
inline void AMessage::set_allocated_f(::test::protobuf::cpp::Submessage1* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.f_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_ = reinterpret_cast<::test::protobuf::cpp::Submessage1*>(value);
  // @@protoc_insertion_point(field_set_allocated:test.protobuf.cpp.AMessage.f)
}

// repeated .test.protobuf.cpp.Submessage2 g = 7;
inline int AMessage::_internal_g_size() const {
  return _internal_g().size();
}
inline int AMessage::g_size() const {
  return _internal_g_size();
}
inline void AMessage::clear_g() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.g_.Clear();
}
inline ::test::protobuf::cpp::Submessage2* AMessage::mutable_g(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:test.protobuf.cpp.AMessage.g)
  return _internal_mutable_g()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::test::protobuf::cpp::Submessage2>* AMessage::mutable_g()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:test.protobuf.cpp.AMessage.g)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_g();
}
inline const ::test::protobuf::cpp::Submessage2& AMessage::g(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.AMessage.g)
  return _internal_g().Get(index);
}
inline ::test::protobuf::cpp::Submessage2* AMessage::add_g() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::test::protobuf::cpp::Submessage2* _add = _internal_mutable_g()->Add();
  // @@protoc_insertion_point(field_add:test.protobuf.cpp.AMessage.g)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::test::protobuf::cpp::Submessage2>& AMessage::g() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:test.protobuf.cpp.AMessage.g)
  return _internal_g();
}
inline const ::google::protobuf::RepeatedPtrField<::test::protobuf::cpp::Submessage2>&
AMessage::_internal_g() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.g_;
}
inline ::google::protobuf::RepeatedPtrField<::test::protobuf::cpp::Submessage2>*
AMessage::_internal_mutable_g() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.g_;
}

// -------------------------------------------------------------------

// PointField

// optional uint32 time = 1;
inline bool PointField::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void PointField::clear_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t PointField::time() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointField.time)
  return _internal_time();
}
inline void PointField::set_time(::uint32_t value) {
  _internal_set_time(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointField.time)
}
inline ::uint32_t PointField::_internal_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_;
}
inline void PointField::_internal_set_time(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_ = value;
}

// optional double x = 2;
inline bool PointField::has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PointField::clear_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double PointField::x() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointField.x)
  return _internal_x();
}
inline void PointField::set_x(double value) {
  _internal_set_x(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointField.x)
}
inline double PointField::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void PointField::_internal_set_x(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = value;
}

// optional double y = 3;
inline bool PointField::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PointField::clear_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double PointField::y() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointField.y)
  return _internal_y();
}
inline void PointField::set_y(double value) {
  _internal_set_y(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointField.y)
}
inline double PointField::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void PointField::_internal_set_y(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = value;
}

// optional double z = 4;
inline bool PointField::has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PointField::clear_z() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double PointField::z() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointField.z)
  return _internal_z();
}
inline void PointField::set_z(double value) {
  _internal_set_z(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointField.z)
}
inline double PointField::_internal_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_;
}
inline void PointField::_internal_set_z(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_ = value;
}

// optional double distance = 5;
inline bool PointField::has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void PointField::clear_distance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double PointField::distance() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointField.distance)
  return _internal_distance();
}
inline void PointField::set_distance(double value) {
  _internal_set_distance(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointField.distance)
}
inline double PointField::_internal_distance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.distance_;
}
inline void PointField::_internal_set_distance(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.distance_ = value;
}

// optional double pitch = 6;
inline bool PointField::has_pitch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void PointField::clear_pitch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pitch_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double PointField::pitch() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointField.pitch)
  return _internal_pitch();
}
inline void PointField::set_pitch(double value) {
  _internal_set_pitch(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointField.pitch)
}
inline double PointField::_internal_pitch() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pitch_;
}
inline void PointField::_internal_set_pitch(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pitch_ = value;
}

// optional double yaw = 7;
inline bool PointField::has_yaw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void PointField::clear_yaw() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.yaw_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double PointField::yaw() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointField.yaw)
  return _internal_yaw();
}
inline void PointField::set_yaw(double value) {
  _internal_set_yaw(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointField.yaw)
}
inline double PointField::_internal_yaw() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.yaw_;
}
inline void PointField::_internal_set_yaw(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.yaw_ = value;
}

// optional uint32 intensity = 8;
inline bool PointField::has_intensity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void PointField::clear_intensity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.intensity_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t PointField::intensity() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointField.intensity)
  return _internal_intensity();
}
inline void PointField::set_intensity(::uint32_t value) {
  _internal_set_intensity(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointField.intensity)
}
inline ::uint32_t PointField::_internal_intensity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.intensity_;
}
inline void PointField::_internal_set_intensity(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.intensity_ = value;
}

// optional uint32 ring = 9;
inline bool PointField::has_ring() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void PointField::clear_ring() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ring_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t PointField::ring() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointField.ring)
  return _internal_ring();
}
inline void PointField::set_ring(::uint32_t value) {
  _internal_set_ring(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointField.ring)
}
inline ::uint32_t PointField::_internal_ring() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ring_;
}
inline void PointField::_internal_set_ring(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ring_ = value;
}

// -------------------------------------------------------------------

// PointCloud

// optional uint32 height = 1;
inline bool PointCloud::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PointCloud::clear_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t PointCloud::height() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointCloud.height)
  return _internal_height();
}
inline void PointCloud::set_height(::uint32_t value) {
  _internal_set_height(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointCloud.height)
}
inline ::uint32_t PointCloud::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void PointCloud::_internal_set_height(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_ = value;
}

// optional uint32 width = 2;
inline bool PointCloud::has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PointCloud::clear_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t PointCloud::width() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointCloud.width)
  return _internal_width();
}
inline void PointCloud::set_width(::uint32_t value) {
  _internal_set_width(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointCloud.width)
}
inline ::uint32_t PointCloud::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void PointCloud::_internal_set_width(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_ = value;
}

// optional uint32 point_step = 3;
inline bool PointCloud::has_point_step() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PointCloud::clear_point_step() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.point_step_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t PointCloud::point_step() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointCloud.point_step)
  return _internal_point_step();
}
inline void PointCloud::set_point_step(::uint32_t value) {
  _internal_set_point_step(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointCloud.point_step)
}
inline ::uint32_t PointCloud::_internal_point_step() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.point_step_;
}
inline void PointCloud::_internal_set_point_step(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.point_step_ = value;
}

// optional uint32 row_step = 4;
inline bool PointCloud::has_row_step() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void PointCloud::clear_row_step() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.row_step_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t PointCloud::row_step() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointCloud.row_step)
  return _internal_row_step();
}
inline void PointCloud::set_row_step(::uint32_t value) {
  _internal_set_row_step(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointCloud.row_step)
}
inline ::uint32_t PointCloud::_internal_row_step() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.row_step_;
}
inline void PointCloud::_internal_set_row_step(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.row_step_ = value;
}

// repeated .test.protobuf.cpp.PointField points = 5;
inline int PointCloud::_internal_points_size() const {
  return _internal_points().size();
}
inline int PointCloud::points_size() const {
  return _internal_points_size();
}
inline void PointCloud::clear_points() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.points_.Clear();
}
inline ::test::protobuf::cpp::PointField* PointCloud::mutable_points(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:test.protobuf.cpp.PointCloud.points)
  return _internal_mutable_points()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::test::protobuf::cpp::PointField>* PointCloud::mutable_points()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:test.protobuf.cpp.PointCloud.points)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_points();
}
inline const ::test::protobuf::cpp::PointField& PointCloud::points(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointCloud.points)
  return _internal_points().Get(index);
}
inline ::test::protobuf::cpp::PointField* PointCloud::add_points() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::test::protobuf::cpp::PointField* _add = _internal_mutable_points()->Add();
  // @@protoc_insertion_point(field_add:test.protobuf.cpp.PointCloud.points)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::test::protobuf::cpp::PointField>& PointCloud::points() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:test.protobuf.cpp.PointCloud.points)
  return _internal_points();
}
inline const ::google::protobuf::RepeatedPtrField<::test::protobuf::cpp::PointField>&
PointCloud::_internal_points() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.points_;
}
inline ::google::protobuf::RepeatedPtrField<::test::protobuf::cpp::PointField>*
PointCloud::_internal_mutable_points() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.points_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace cpp
}  // namespace protobuf
}  // namespace test


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_amessage_2eproto_2epb_2eh
