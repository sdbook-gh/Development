// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ERRORCODE_FBS_APOLLO_COMMON_H_
#define FLATBUFFERS_GENERATED_ERRORCODE_FBS_APOLLO_COMMON_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace fbs {
namespace apollo {
namespace common {

struct StatusPb;
struct StatusPbBuilder;
struct StatusPbT;

enum class ErrorCode : int32_t {
  OK = 0,
  CONTROL_ERROR = 1000,
  CONTROL_INIT_ERROR = 1001,
  CONTROL_COMPUTE_ERROR = 1002,
  CONTROL_ESTOP_ERROR = 1003,
  PERFECT_CONTROL_ERROR = 1004,
  CANBUS_ERROR = 2000,
  CAN_CLIENT_ERROR_BASE = 2100,
  CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED = 2101,
  CAN_CLIENT_ERROR_FRAME_NUM = 2102,
  CAN_CLIENT_ERROR_SEND_FAILED = 2103,
  CAN_CLIENT_ERROR_RECV_FAILED = 2104,
  LOCALIZATION_ERROR = 3000,
  LOCALIZATION_ERROR_MSG = 3100,
  LOCALIZATION_ERROR_LIDAR = 3200,
  LOCALIZATION_ERROR_INTEG = 3300,
  LOCALIZATION_ERROR_GNSS = 3400,
  PERCEPTION_ERROR = 4000,
  PERCEPTION_ERROR_TF = 4001,
  PERCEPTION_ERROR_PROCESS = 4002,
  PERCEPTION_FATAL = 4003,
  PERCEPTION_ERROR_NONE = 4004,
  PERCEPTION_ERROR_UNKNOWN = 4005,
  PREDICTION_ERROR = 5000,
  PLANNING_ERROR = 6000,
  PLANNING_ERROR_NOT_READY = 6001,
  HDMAP_DATA_ERROR = 7000,
  ROUTING_ERROR = 8000,
  ROUTING_ERROR_REQUEST = 8001,
  ROUTING_ERROR_RESPONSE = 8002,
  ROUTING_ERROR_NOT_READY = 8003,
  END_OF_INPUT = 9000,
  HTTP_LOGIC_ERROR = 10000,
  HTTP_RUNTIME_ERROR = 10001,
  RELATIVE_MAP_ERROR = 11000,
  RELATIVE_MAP_NOT_READY = 11001,
  DRIVER_ERROR_GNSS = 12000,
  DRIVER_ERROR_VELODYNE = 13000,
  STORYTELLING_ERROR = 14000,
  MIN = OK,
  MAX = STORYTELLING_ERROR
};

inline const ErrorCode (&EnumValuesErrorCode())[39] {
  static const ErrorCode values[] = {
    ErrorCode::OK,
    ErrorCode::CONTROL_ERROR,
    ErrorCode::CONTROL_INIT_ERROR,
    ErrorCode::CONTROL_COMPUTE_ERROR,
    ErrorCode::CONTROL_ESTOP_ERROR,
    ErrorCode::PERFECT_CONTROL_ERROR,
    ErrorCode::CANBUS_ERROR,
    ErrorCode::CAN_CLIENT_ERROR_BASE,
    ErrorCode::CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED,
    ErrorCode::CAN_CLIENT_ERROR_FRAME_NUM,
    ErrorCode::CAN_CLIENT_ERROR_SEND_FAILED,
    ErrorCode::CAN_CLIENT_ERROR_RECV_FAILED,
    ErrorCode::LOCALIZATION_ERROR,
    ErrorCode::LOCALIZATION_ERROR_MSG,
    ErrorCode::LOCALIZATION_ERROR_LIDAR,
    ErrorCode::LOCALIZATION_ERROR_INTEG,
    ErrorCode::LOCALIZATION_ERROR_GNSS,
    ErrorCode::PERCEPTION_ERROR,
    ErrorCode::PERCEPTION_ERROR_TF,
    ErrorCode::PERCEPTION_ERROR_PROCESS,
    ErrorCode::PERCEPTION_FATAL,
    ErrorCode::PERCEPTION_ERROR_NONE,
    ErrorCode::PERCEPTION_ERROR_UNKNOWN,
    ErrorCode::PREDICTION_ERROR,
    ErrorCode::PLANNING_ERROR,
    ErrorCode::PLANNING_ERROR_NOT_READY,
    ErrorCode::HDMAP_DATA_ERROR,
    ErrorCode::ROUTING_ERROR,
    ErrorCode::ROUTING_ERROR_REQUEST,
    ErrorCode::ROUTING_ERROR_RESPONSE,
    ErrorCode::ROUTING_ERROR_NOT_READY,
    ErrorCode::END_OF_INPUT,
    ErrorCode::HTTP_LOGIC_ERROR,
    ErrorCode::HTTP_RUNTIME_ERROR,
    ErrorCode::RELATIVE_MAP_ERROR,
    ErrorCode::RELATIVE_MAP_NOT_READY,
    ErrorCode::DRIVER_ERROR_GNSS,
    ErrorCode::DRIVER_ERROR_VELODYNE,
    ErrorCode::STORYTELLING_ERROR
  };
  return values;
}

inline const char *EnumNameErrorCode(ErrorCode e) {
  switch (e) {
    case ErrorCode::OK: return "OK";
    case ErrorCode::CONTROL_ERROR: return "CONTROL_ERROR";
    case ErrorCode::CONTROL_INIT_ERROR: return "CONTROL_INIT_ERROR";
    case ErrorCode::CONTROL_COMPUTE_ERROR: return "CONTROL_COMPUTE_ERROR";
    case ErrorCode::CONTROL_ESTOP_ERROR: return "CONTROL_ESTOP_ERROR";
    case ErrorCode::PERFECT_CONTROL_ERROR: return "PERFECT_CONTROL_ERROR";
    case ErrorCode::CANBUS_ERROR: return "CANBUS_ERROR";
    case ErrorCode::CAN_CLIENT_ERROR_BASE: return "CAN_CLIENT_ERROR_BASE";
    case ErrorCode::CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED: return "CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED";
    case ErrorCode::CAN_CLIENT_ERROR_FRAME_NUM: return "CAN_CLIENT_ERROR_FRAME_NUM";
    case ErrorCode::CAN_CLIENT_ERROR_SEND_FAILED: return "CAN_CLIENT_ERROR_SEND_FAILED";
    case ErrorCode::CAN_CLIENT_ERROR_RECV_FAILED: return "CAN_CLIENT_ERROR_RECV_FAILED";
    case ErrorCode::LOCALIZATION_ERROR: return "LOCALIZATION_ERROR";
    case ErrorCode::LOCALIZATION_ERROR_MSG: return "LOCALIZATION_ERROR_MSG";
    case ErrorCode::LOCALIZATION_ERROR_LIDAR: return "LOCALIZATION_ERROR_LIDAR";
    case ErrorCode::LOCALIZATION_ERROR_INTEG: return "LOCALIZATION_ERROR_INTEG";
    case ErrorCode::LOCALIZATION_ERROR_GNSS: return "LOCALIZATION_ERROR_GNSS";
    case ErrorCode::PERCEPTION_ERROR: return "PERCEPTION_ERROR";
    case ErrorCode::PERCEPTION_ERROR_TF: return "PERCEPTION_ERROR_TF";
    case ErrorCode::PERCEPTION_ERROR_PROCESS: return "PERCEPTION_ERROR_PROCESS";
    case ErrorCode::PERCEPTION_FATAL: return "PERCEPTION_FATAL";
    case ErrorCode::PERCEPTION_ERROR_NONE: return "PERCEPTION_ERROR_NONE";
    case ErrorCode::PERCEPTION_ERROR_UNKNOWN: return "PERCEPTION_ERROR_UNKNOWN";
    case ErrorCode::PREDICTION_ERROR: return "PREDICTION_ERROR";
    case ErrorCode::PLANNING_ERROR: return "PLANNING_ERROR";
    case ErrorCode::PLANNING_ERROR_NOT_READY: return "PLANNING_ERROR_NOT_READY";
    case ErrorCode::HDMAP_DATA_ERROR: return "HDMAP_DATA_ERROR";
    case ErrorCode::ROUTING_ERROR: return "ROUTING_ERROR";
    case ErrorCode::ROUTING_ERROR_REQUEST: return "ROUTING_ERROR_REQUEST";
    case ErrorCode::ROUTING_ERROR_RESPONSE: return "ROUTING_ERROR_RESPONSE";
    case ErrorCode::ROUTING_ERROR_NOT_READY: return "ROUTING_ERROR_NOT_READY";
    case ErrorCode::END_OF_INPUT: return "END_OF_INPUT";
    case ErrorCode::HTTP_LOGIC_ERROR: return "HTTP_LOGIC_ERROR";
    case ErrorCode::HTTP_RUNTIME_ERROR: return "HTTP_RUNTIME_ERROR";
    case ErrorCode::RELATIVE_MAP_ERROR: return "RELATIVE_MAP_ERROR";
    case ErrorCode::RELATIVE_MAP_NOT_READY: return "RELATIVE_MAP_NOT_READY";
    case ErrorCode::DRIVER_ERROR_GNSS: return "DRIVER_ERROR_GNSS";
    case ErrorCode::DRIVER_ERROR_VELODYNE: return "DRIVER_ERROR_VELODYNE";
    case ErrorCode::STORYTELLING_ERROR: return "STORYTELLING_ERROR";
    default: return "";
  }
}

struct StatusPbT : public ::flatbuffers::NativeTable {
  typedef StatusPb TableType;
  fbs::apollo::common::ErrorCode error_code = fbs::apollo::common::ErrorCode::OK;
  std::string msg{};
};

struct StatusPb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StatusPbT NativeTableType;
  typedef StatusPbBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ERROR_CODE = 4,
    VT_MSG = 6
  };
  fbs::apollo::common::ErrorCode error_code() const {
    return static_cast<fbs::apollo::common::ErrorCode>(GetField<int32_t>(VT_ERROR_CODE, 0));
  }
  bool mutate_error_code(fbs::apollo::common::ErrorCode _error_code = static_cast<fbs::apollo::common::ErrorCode>(0)) {
    return SetField<int32_t>(VT_ERROR_CODE, static_cast<int32_t>(_error_code), 0);
  }
  const ::flatbuffers::String *msg() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSG);
  }
  ::flatbuffers::String *mutable_msg() {
    return GetPointer<::flatbuffers::String *>(VT_MSG);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERROR_CODE, 4) &&
           VerifyOffset(verifier, VT_MSG) &&
           verifier.VerifyString(msg()) &&
           verifier.EndTable();
  }
  StatusPbT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(StatusPbT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<StatusPb> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const StatusPbT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct StatusPbBuilder {
  typedef StatusPb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_error_code(fbs::apollo::common::ErrorCode error_code) {
    fbb_.AddElement<int32_t>(StatusPb::VT_ERROR_CODE, static_cast<int32_t>(error_code), 0);
  }
  void add_msg(::flatbuffers::Offset<::flatbuffers::String> msg) {
    fbb_.AddOffset(StatusPb::VT_MSG, msg);
  }
  explicit StatusPbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<StatusPb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StatusPb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<StatusPb> CreateStatusPb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    fbs::apollo::common::ErrorCode error_code = fbs::apollo::common::ErrorCode::OK,
    ::flatbuffers::Offset<::flatbuffers::String> msg = 0) {
  StatusPbBuilder builder_(_fbb);
  builder_.add_msg(msg);
  builder_.add_error_code(error_code);
  return builder_.Finish();
}

struct StatusPb::Traits {
  using type = StatusPb;
  static auto constexpr Create = CreateStatusPb;
};

inline ::flatbuffers::Offset<StatusPb> CreateStatusPbDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    fbs::apollo::common::ErrorCode error_code = fbs::apollo::common::ErrorCode::OK,
    const char *msg = nullptr) {
  auto msg__ = msg ? _fbb.CreateString(msg) : 0;
  return fbs::apollo::common::CreateStatusPb(
      _fbb,
      error_code,
      msg__);
}

::flatbuffers::Offset<StatusPb> CreateStatusPb(::flatbuffers::FlatBufferBuilder &_fbb, const StatusPbT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline StatusPbT *StatusPb::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::make_unique<StatusPbT>();
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void StatusPb::UnPackTo(StatusPbT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = error_code(); _o->error_code = _e; }
  { auto _e = msg(); if (_e) _o->msg = _e->str(); }
}

inline ::flatbuffers::Offset<StatusPb> StatusPb::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const StatusPbT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateStatusPb(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<StatusPb> CreateStatusPb(::flatbuffers::FlatBufferBuilder &_fbb, const StatusPbT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const StatusPbT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _error_code = _o->error_code;
  auto _msg = _o->msg.empty() ? 0 : _fbb.CreateString(_o->msg);
  return fbs::apollo::common::CreateStatusPb(
      _fbb,
      _error_code,
      _msg);
}

inline const fbs::apollo::common::StatusPb *GetStatusPb(const void *buf) {
  return ::flatbuffers::GetRoot<fbs::apollo::common::StatusPb>(buf);
}

inline const fbs::apollo::common::StatusPb *GetSizePrefixedStatusPb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fbs::apollo::common::StatusPb>(buf);
}

inline StatusPb *GetMutableStatusPb(void *buf) {
  return ::flatbuffers::GetMutableRoot<StatusPb>(buf);
}

inline fbs::apollo::common::StatusPb *GetMutableSizePrefixedStatusPb(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<fbs::apollo::common::StatusPb>(buf);
}

inline bool VerifyStatusPbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbs::apollo::common::StatusPb>(nullptr);
}

inline bool VerifySizePrefixedStatusPbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbs::apollo::common::StatusPb>(nullptr);
}

inline void FinishStatusPbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fbs::apollo::common::StatusPb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedStatusPbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fbs::apollo::common::StatusPb> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fbs::apollo::common::StatusPbT> UnPackStatusPb(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fbs::apollo::common::StatusPbT>(GetStatusPb(buf)->UnPack(res));
}

inline std::unique_ptr<fbs::apollo::common::StatusPbT> UnPackSizePrefixedStatusPb(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fbs::apollo::common::StatusPbT>(GetSizePrefixedStatusPb(buf)->UnPack(res));
}

}  // namespace common
}  // namespace apollo
}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_ERRORCODE_FBS_APOLLO_COMMON_H_
