// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POINTCLOUD_FBS_APOLLO_DRIVERS_H_
#define FLATBUFFERS_GENERATED_POINTCLOUD_FBS_APOLLO_DRIVERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "header_generated.h"

namespace fbs {
namespace apollo {
namespace drivers {

struct PointXYZIT;
struct PointXYZITBuilder;
struct PointXYZITT;

struct PointCloud;
struct PointCloudBuilder;
struct PointCloudT;

struct PointXYZITT : public ::flatbuffers::NativeTable {
  typedef PointXYZIT TableType;
  float x = std::numeric_limits<float>::quiet_NaN();
  float y = std::numeric_limits<float>::quiet_NaN();
  float z = std::numeric_limits<float>::quiet_NaN();
  uint32_t intensity = 0;
  uint64_t timestamp = 0;
};

struct PointXYZIT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PointXYZITT NativeTableType;
  typedef PointXYZITBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8,
    VT_INTENSITY = 10,
    VT_TIMESTAMP = 12
  };
  float x() const {
    return GetField<float>(VT_X, std::numeric_limits<float>::quiet_NaN());
  }
  bool mutate_x(float _x = std::numeric_limits<float>::quiet_NaN()) {
    return SetField<float>(VT_X, _x, std::numeric_limits<float>::quiet_NaN());
  }
  float y() const {
    return GetField<float>(VT_Y, std::numeric_limits<float>::quiet_NaN());
  }
  bool mutate_y(float _y = std::numeric_limits<float>::quiet_NaN()) {
    return SetField<float>(VT_Y, _y, std::numeric_limits<float>::quiet_NaN());
  }
  float z() const {
    return GetField<float>(VT_Z, std::numeric_limits<float>::quiet_NaN());
  }
  bool mutate_z(float _z = std::numeric_limits<float>::quiet_NaN()) {
    return SetField<float>(VT_Z, _z, std::numeric_limits<float>::quiet_NaN());
  }
  uint32_t intensity() const {
    return GetField<uint32_t>(VT_INTENSITY, 0);
  }
  bool mutate_intensity(uint32_t _intensity = 0) {
    return SetField<uint32_t>(VT_INTENSITY, _intensity, 0);
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  bool mutate_timestamp(uint64_t _timestamp = 0) {
    return SetField<uint64_t>(VT_TIMESTAMP, _timestamp, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<float>(verifier, VT_Z, 4) &&
           VerifyField<uint32_t>(verifier, VT_INTENSITY, 4) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP, 8) &&
           verifier.EndTable();
  }
  PointXYZITT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PointXYZITT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<PointXYZIT> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PointXYZITT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PointXYZITBuilder {
  typedef PointXYZIT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(PointXYZIT::VT_X, x, std::numeric_limits<float>::quiet_NaN());
  }
  void add_y(float y) {
    fbb_.AddElement<float>(PointXYZIT::VT_Y, y, std::numeric_limits<float>::quiet_NaN());
  }
  void add_z(float z) {
    fbb_.AddElement<float>(PointXYZIT::VT_Z, z, std::numeric_limits<float>::quiet_NaN());
  }
  void add_intensity(uint32_t intensity) {
    fbb_.AddElement<uint32_t>(PointXYZIT::VT_INTENSITY, intensity, 0);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(PointXYZIT::VT_TIMESTAMP, timestamp, 0);
  }
  explicit PointXYZITBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PointXYZIT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PointXYZIT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PointXYZIT> CreatePointXYZIT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = std::numeric_limits<float>::quiet_NaN(),
    float y = std::numeric_limits<float>::quiet_NaN(),
    float z = std::numeric_limits<float>::quiet_NaN(),
    uint32_t intensity = 0,
    uint64_t timestamp = 0) {
  PointXYZITBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_intensity(intensity);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct PointXYZIT::Traits {
  using type = PointXYZIT;
  static auto constexpr Create = CreatePointXYZIT;
};

::flatbuffers::Offset<PointXYZIT> CreatePointXYZIT(::flatbuffers::FlatBufferBuilder &_fbb, const PointXYZITT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct PointCloudT : public ::flatbuffers::NativeTable {
  typedef PointCloud TableType;
  std::unique_ptr<fbs::apollo::common::HeaderT> header{};
  std::string frame_id{};
  bool is_dense = false;
  std::vector<std::unique_ptr<fbs::apollo::drivers::PointXYZITT>> point{};
  double measurement_time = 0.0;
  uint32_t width = 0;
  uint32_t height = 0;
  PointCloudT() = default;
  PointCloudT(const PointCloudT &o);
  PointCloudT(PointCloudT&&) FLATBUFFERS_NOEXCEPT = default;
  PointCloudT &operator=(PointCloudT o) FLATBUFFERS_NOEXCEPT;
};

struct PointCloud FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PointCloudT NativeTableType;
  typedef PointCloudBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_FRAME_ID = 6,
    VT_IS_DENSE = 8,
    VT_POINT = 10,
    VT_MEASUREMENT_TIME = 12,
    VT_WIDTH = 14,
    VT_HEIGHT = 16
  };
  const fbs::apollo::common::Header *header() const {
    return GetPointer<const fbs::apollo::common::Header *>(VT_HEADER);
  }
  fbs::apollo::common::Header *mutable_header() {
    return GetPointer<fbs::apollo::common::Header *>(VT_HEADER);
  }
  const ::flatbuffers::String *frame_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FRAME_ID);
  }
  ::flatbuffers::String *mutable_frame_id() {
    return GetPointer<::flatbuffers::String *>(VT_FRAME_ID);
  }
  bool is_dense() const {
    return GetField<uint8_t>(VT_IS_DENSE, 0) != 0;
  }
  bool mutate_is_dense(bool _is_dense = 0) {
    return SetField<uint8_t>(VT_IS_DENSE, static_cast<uint8_t>(_is_dense), 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<fbs::apollo::drivers::PointXYZIT>> *point() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fbs::apollo::drivers::PointXYZIT>> *>(VT_POINT);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<fbs::apollo::drivers::PointXYZIT>> *mutable_point() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<fbs::apollo::drivers::PointXYZIT>> *>(VT_POINT);
  }
  double measurement_time() const {
    return GetField<double>(VT_MEASUREMENT_TIME, 0.0);
  }
  bool mutate_measurement_time(double _measurement_time = 0.0) {
    return SetField<double>(VT_MEASUREMENT_TIME, _measurement_time, 0.0);
  }
  uint32_t width() const {
    return GetField<uint32_t>(VT_WIDTH, 0);
  }
  bool mutate_width(uint32_t _width = 0) {
    return SetField<uint32_t>(VT_WIDTH, _width, 0);
  }
  uint32_t height() const {
    return GetField<uint32_t>(VT_HEIGHT, 0);
  }
  bool mutate_height(uint32_t _height = 0) {
    return SetField<uint32_t>(VT_HEIGHT, _height, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyOffset(verifier, VT_FRAME_ID) &&
           verifier.VerifyString(frame_id()) &&
           VerifyField<uint8_t>(verifier, VT_IS_DENSE, 1) &&
           VerifyOffset(verifier, VT_POINT) &&
           verifier.VerifyVector(point()) &&
           verifier.VerifyVectorOfTables(point()) &&
           VerifyField<double>(verifier, VT_MEASUREMENT_TIME, 8) &&
           VerifyField<uint32_t>(verifier, VT_WIDTH, 4) &&
           VerifyField<uint32_t>(verifier, VT_HEIGHT, 4) &&
           verifier.EndTable();
  }
  PointCloudT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PointCloudT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<PointCloud> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PointCloudT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PointCloudBuilder {
  typedef PointCloud Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_header(::flatbuffers::Offset<fbs::apollo::common::Header> header) {
    fbb_.AddOffset(PointCloud::VT_HEADER, header);
  }
  void add_frame_id(::flatbuffers::Offset<::flatbuffers::String> frame_id) {
    fbb_.AddOffset(PointCloud::VT_FRAME_ID, frame_id);
  }
  void add_is_dense(bool is_dense) {
    fbb_.AddElement<uint8_t>(PointCloud::VT_IS_DENSE, static_cast<uint8_t>(is_dense), 0);
  }
  void add_point(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fbs::apollo::drivers::PointXYZIT>>> point) {
    fbb_.AddOffset(PointCloud::VT_POINT, point);
  }
  void add_measurement_time(double measurement_time) {
    fbb_.AddElement<double>(PointCloud::VT_MEASUREMENT_TIME, measurement_time, 0.0);
  }
  void add_width(uint32_t width) {
    fbb_.AddElement<uint32_t>(PointCloud::VT_WIDTH, width, 0);
  }
  void add_height(uint32_t height) {
    fbb_.AddElement<uint32_t>(PointCloud::VT_HEIGHT, height, 0);
  }
  explicit PointCloudBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PointCloud> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PointCloud>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PointCloud> CreatePointCloud(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<fbs::apollo::common::Header> header = 0,
    ::flatbuffers::Offset<::flatbuffers::String> frame_id = 0,
    bool is_dense = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fbs::apollo::drivers::PointXYZIT>>> point = 0,
    double measurement_time = 0.0,
    uint32_t width = 0,
    uint32_t height = 0) {
  PointCloudBuilder builder_(_fbb);
  builder_.add_measurement_time(measurement_time);
  builder_.add_height(height);
  builder_.add_width(width);
  builder_.add_point(point);
  builder_.add_frame_id(frame_id);
  builder_.add_header(header);
  builder_.add_is_dense(is_dense);
  return builder_.Finish();
}

struct PointCloud::Traits {
  using type = PointCloud;
  static auto constexpr Create = CreatePointCloud;
};

inline ::flatbuffers::Offset<PointCloud> CreatePointCloudDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<fbs::apollo::common::Header> header = 0,
    const char *frame_id = nullptr,
    bool is_dense = false,
    const std::vector<::flatbuffers::Offset<fbs::apollo::drivers::PointXYZIT>> *point = nullptr,
    double measurement_time = 0.0,
    uint32_t width = 0,
    uint32_t height = 0) {
  auto frame_id__ = frame_id ? _fbb.CreateString(frame_id) : 0;
  auto point__ = point ? _fbb.CreateVector<::flatbuffers::Offset<fbs::apollo::drivers::PointXYZIT>>(*point) : 0;
  return fbs::apollo::drivers::CreatePointCloud(
      _fbb,
      header,
      frame_id__,
      is_dense,
      point__,
      measurement_time,
      width,
      height);
}

::flatbuffers::Offset<PointCloud> CreatePointCloud(::flatbuffers::FlatBufferBuilder &_fbb, const PointCloudT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline PointXYZITT *PointXYZIT::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::make_unique<PointXYZITT>();
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void PointXYZIT::UnPackTo(PointXYZITT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = x(); _o->x = _e; }
  { auto _e = y(); _o->y = _e; }
  { auto _e = z(); _o->z = _e; }
  { auto _e = intensity(); _o->intensity = _e; }
  { auto _e = timestamp(); _o->timestamp = _e; }
}

inline ::flatbuffers::Offset<PointXYZIT> PointXYZIT::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PointXYZITT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePointXYZIT(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<PointXYZIT> CreatePointXYZIT(::flatbuffers::FlatBufferBuilder &_fbb, const PointXYZITT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const PointXYZITT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _x = _o->x;
  auto _y = _o->y;
  auto _z = _o->z;
  auto _intensity = _o->intensity;
  auto _timestamp = _o->timestamp;
  return fbs::apollo::drivers::CreatePointXYZIT(
      _fbb,
      _x,
      _y,
      _z,
      _intensity,
      _timestamp);
}

inline PointCloudT::PointCloudT(const PointCloudT &o)
      : header((o.header) ? new fbs::apollo::common::HeaderT(*o.header) : nullptr),
        frame_id(o.frame_id),
        is_dense(o.is_dense),
        measurement_time(o.measurement_time),
        width(o.width),
        height(o.height) {
  point.reserve(o.point.size());
  for (const auto &point_ : o.point) { point.emplace_back((point_) ? new fbs::apollo::drivers::PointXYZITT(*point_) : nullptr); }
}

inline PointCloudT &PointCloudT::operator=(PointCloudT o) FLATBUFFERS_NOEXCEPT {
  std::swap(header, o.header);
  std::swap(frame_id, o.frame_id);
  std::swap(is_dense, o.is_dense);
  std::swap(point, o.point);
  std::swap(measurement_time, o.measurement_time);
  std::swap(width, o.width);
  std::swap(height, o.height);
  return *this;
}

inline PointCloudT *PointCloud::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::make_unique<PointCloudT>();
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void PointCloud::UnPackTo(PointCloudT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = header(); if (_e) { if(_o->header) { _e->UnPackTo(_o->header.get(), _resolver); } else { _o->header = std::unique_ptr<fbs::apollo::common::HeaderT>(_e->UnPack(_resolver)); } } else if (_o->header) { _o->header.reset(); } }
  { auto _e = frame_id(); if (_e) _o->frame_id = _e->str(); }
  { auto _e = is_dense(); _o->is_dense = _e; }
  { auto _e = point(); if (_e) { _o->point.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->point[_i]) { _e->Get(_i)->UnPackTo(_o->point[_i].get(), _resolver); } else { _o->point[_i] = std::unique_ptr<fbs::apollo::drivers::PointXYZITT>(_e->Get(_i)->UnPack(_resolver)); } } } else { _o->point.resize(0); } }
  { auto _e = measurement_time(); _o->measurement_time = _e; }
  { auto _e = width(); _o->width = _e; }
  { auto _e = height(); _o->height = _e; }
}

inline ::flatbuffers::Offset<PointCloud> PointCloud::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PointCloudT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePointCloud(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<PointCloud> CreatePointCloud(::flatbuffers::FlatBufferBuilder &_fbb, const PointCloudT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const PointCloudT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _header = _o->header ? CreateHeader(_fbb, _o->header.get(), _rehasher) : 0;
  auto _frame_id = _o->frame_id.empty() ? 0 : _fbb.CreateString(_o->frame_id);
  auto _is_dense = _o->is_dense;
  auto _point = _o->point.size() ? _fbb.CreateVector<::flatbuffers::Offset<fbs::apollo::drivers::PointXYZIT>> (_o->point.size(), [](size_t i, _VectorArgs *__va) { return CreatePointXYZIT(*__va->__fbb, __va->__o->point[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _measurement_time = _o->measurement_time;
  auto _width = _o->width;
  auto _height = _o->height;
  return fbs::apollo::drivers::CreatePointCloud(
      _fbb,
      _header,
      _frame_id,
      _is_dense,
      _point,
      _measurement_time,
      _width,
      _height);
}

}  // namespace drivers
}  // namespace apollo
}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_POINTCLOUD_FBS_APOLLO_DRIVERS_H_
