// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: amessage.proto

#include "amessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace test {
namespace protobuf {
namespace cpp {
PROTOBUF_CONSTEXPR Submessage1::Submessage1(
    ::_pbi::ConstantInitialized)
  : value_(0){}
struct Submessage1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Submessage1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Submessage1DefaultTypeInternal() {}
  union {
    Submessage1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Submessage1DefaultTypeInternal _Submessage1_default_instance_;
PROTOBUF_CONSTEXPR Submessage2::Submessage2(
    ::_pbi::ConstantInitialized)
  : value_(0){}
struct Submessage2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Submessage2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Submessage2DefaultTypeInternal() {}
  union {
    Submessage2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Submessage2DefaultTypeInternal _Submessage2_default_instance_;
PROTOBUF_CONSTEXPR AMessage::AMessage(
    ::_pbi::ConstantInitialized)
  : c_()
  , d_()
  , g_()
  , e_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , f_(nullptr)
  , a_(0)
  , b_(0){}
struct AMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AMessageDefaultTypeInternal() {}
  union {
    AMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AMessageDefaultTypeInternal _AMessage_default_instance_;
}  // namespace cpp
}  // namespace protobuf
}  // namespace test
static ::_pb::Metadata file_level_metadata_amessage_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_amessage_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_amessage_2eproto = nullptr;

const uint32_t TableStruct_amessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::test::protobuf::cpp::Submessage1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::test::protobuf::cpp::Submessage1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test::protobuf::cpp::Submessage1, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::test::protobuf::cpp::Submessage2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::test::protobuf::cpp::Submessage2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test::protobuf::cpp::Submessage2, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::test::protobuf::cpp::AMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::test::protobuf::cpp::AMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test::protobuf::cpp::AMessage, a_),
  PROTOBUF_FIELD_OFFSET(::test::protobuf::cpp::AMessage, b_),
  PROTOBUF_FIELD_OFFSET(::test::protobuf::cpp::AMessage, c_),
  PROTOBUF_FIELD_OFFSET(::test::protobuf::cpp::AMessage, d_),
  PROTOBUF_FIELD_OFFSET(::test::protobuf::cpp::AMessage, e_),
  PROTOBUF_FIELD_OFFSET(::test::protobuf::cpp::AMessage, f_),
  PROTOBUF_FIELD_OFFSET(::test::protobuf::cpp::AMessage, g_),
  2,
  3,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::test::protobuf::cpp::Submessage1)},
  { 8, 15, -1, sizeof(::test::protobuf::cpp::Submessage2)},
  { 16, 29, -1, sizeof(::test::protobuf::cpp::AMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::test::protobuf::cpp::_Submessage1_default_instance_._instance,
  &::test::protobuf::cpp::_Submessage2_default_instance_._instance,
  &::test::protobuf::cpp::_AMessage_default_instance_._instance,
};

const char descriptor_table_protodef_amessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016amessage.proto\022\021test.protobuf.cpp\"\034\n\013S"
  "ubmessage1\022\r\n\005value\030\001 \002(\005\"\034\n\013Submessage2"
  "\022\r\n\005value\030\001 \002(\005\"\227\001\n\010AMessage\022\t\n\001a\030\001 \002(\005\022"
  "\t\n\001b\030\002 \001(\005\022\t\n\001c\030\003 \003(\005\022\t\n\001d\030\004 \003(\t\022\t\n\001e\030\005 "
  "\002(\014\022)\n\001f\030\006 \001(\0132\036.test.protobuf.cpp.Subme"
  "ssage1\022)\n\001g\030\007 \003(\0132\036.test.protobuf.cpp.Su"
  "bmessage2"
  ;
static ::_pbi::once_flag descriptor_table_amessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_amessage_2eproto = {
    false, false, 249, descriptor_table_protodef_amessage_2eproto,
    "amessage.proto",
    &descriptor_table_amessage_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_amessage_2eproto::offsets,
    file_level_metadata_amessage_2eproto, file_level_enum_descriptors_amessage_2eproto,
    file_level_service_descriptors_amessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_amessage_2eproto_getter() {
  return &descriptor_table_amessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_amessage_2eproto(&descriptor_table_amessage_2eproto);
namespace test {
namespace protobuf {
namespace cpp {

// ===================================================================

class Submessage1::_Internal {
 public:
  using HasBits = decltype(std::declval<Submessage1>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Submessage1::Submessage1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:test.protobuf.cpp.Submessage1)
}
Submessage1::Submessage1(const Submessage1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:test.protobuf.cpp.Submessage1)
}

inline void Submessage1::SharedCtor() {
value_ = 0;
}

Submessage1::~Submessage1() {
  // @@protoc_insertion_point(destructor:test.protobuf.cpp.Submessage1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Submessage1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Submessage1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Submessage1::Clear() {
// @@protoc_insertion_point(message_clear_start:test.protobuf.cpp.Submessage1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Submessage1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Submessage1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.protobuf.cpp.Submessage1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.protobuf.cpp.Submessage1)
  return target;
}

size_t Submessage1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.protobuf.cpp.Submessage1)
  size_t total_size = 0;

  // required int32 value = 1;
  if (_internal_has_value()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Submessage1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Submessage1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Submessage1::GetClassData() const { return &_class_data_; }

void Submessage1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Submessage1 *>(to)->MergeFrom(
      static_cast<const Submessage1 &>(from));
}


void Submessage1::MergeFrom(const Submessage1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.protobuf.cpp.Submessage1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Submessage1::CopyFrom(const Submessage1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.protobuf.cpp.Submessage1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Submessage1::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Submessage1::InternalSwap(Submessage1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Submessage1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_amessage_2eproto_getter, &descriptor_table_amessage_2eproto_once,
      file_level_metadata_amessage_2eproto[0]);
}

// ===================================================================

class Submessage2::_Internal {
 public:
  using HasBits = decltype(std::declval<Submessage2>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Submessage2::Submessage2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:test.protobuf.cpp.Submessage2)
}
Submessage2::Submessage2(const Submessage2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:test.protobuf.cpp.Submessage2)
}

inline void Submessage2::SharedCtor() {
value_ = 0;
}

Submessage2::~Submessage2() {
  // @@protoc_insertion_point(destructor:test.protobuf.cpp.Submessage2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Submessage2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Submessage2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Submessage2::Clear() {
// @@protoc_insertion_point(message_clear_start:test.protobuf.cpp.Submessage2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Submessage2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Submessage2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.protobuf.cpp.Submessage2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.protobuf.cpp.Submessage2)
  return target;
}

size_t Submessage2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.protobuf.cpp.Submessage2)
  size_t total_size = 0;

  // required int32 value = 1;
  if (_internal_has_value()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Submessage2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Submessage2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Submessage2::GetClassData() const { return &_class_data_; }

void Submessage2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Submessage2 *>(to)->MergeFrom(
      static_cast<const Submessage2 &>(from));
}


void Submessage2::MergeFrom(const Submessage2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.protobuf.cpp.Submessage2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Submessage2::CopyFrom(const Submessage2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.protobuf.cpp.Submessage2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Submessage2::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Submessage2::InternalSwap(Submessage2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Submessage2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_amessage_2eproto_getter, &descriptor_table_amessage_2eproto_once,
      file_level_metadata_amessage_2eproto[1]);
}

// ===================================================================

class AMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AMessage>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_e(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::test::protobuf::cpp::Submessage1& f(const AMessage* msg);
  static void set_has_f(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::test::protobuf::cpp::Submessage1&
AMessage::_Internal::f(const AMessage* msg) {
  return *msg->f_;
}
AMessage::AMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  c_(arena),
  d_(arena),
  g_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:test.protobuf.cpp.AMessage)
}
AMessage::AMessage(const AMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      c_(from.c_),
      d_(from.d_),
      g_(from.g_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  e_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    e_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_e()) {
    e_.Set(from._internal_e(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_f()) {
    f_ = new ::test::protobuf::cpp::Submessage1(*from.f_);
  } else {
    f_ = nullptr;
  }
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&a_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:test.protobuf.cpp.AMessage)
}

inline void AMessage::SharedCtor() {
e_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  e_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&f_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&f_)) + sizeof(b_));
}

AMessage::~AMessage() {
  // @@protoc_insertion_point(destructor:test.protobuf.cpp.AMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  e_.Destroy();
  if (this != internal_default_instance()) delete f_;
}

void AMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:test.protobuf.cpp.AMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  c_.Clear();
  d_.Clear();
  g_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      e_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(f_ != nullptr);
      f_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_) -
        reinterpret_cast<char*>(&a_)) + sizeof(b_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 c = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_c(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_c(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string d = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_d();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "test.protobuf.cpp.AMessage.d");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required bytes e = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_e();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .test.protobuf.cpp.Submessage1 f = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_f(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .test.protobuf.cpp.Submessage2 g = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_g(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.protobuf.cpp.AMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 a = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  // optional int32 b = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_b(), target);
  }

  // repeated int32 c = 3;
  for (int i = 0, n = this->_internal_c_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_c(i), target);
  }

  // repeated string d = 4;
  for (int i = 0, n = this->_internal_d_size(); i < n; i++) {
    const auto& s = this->_internal_d(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "test.protobuf.cpp.AMessage.d");
    target = stream->WriteString(4, s, target);
  }

  // required bytes e = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_e(), target);
  }

  // optional .test.protobuf.cpp.Submessage1 f = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::f(this),
        _Internal::f(this).GetCachedSize(), target, stream);
  }

  // repeated .test.protobuf.cpp.Submessage2 g = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_g_size()); i < n; i++) {
    const auto& repfield = this->_internal_g(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.protobuf.cpp.AMessage)
  return target;
}

size_t AMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:test.protobuf.cpp.AMessage)
  size_t total_size = 0;

  if (_internal_has_e()) {
    // required bytes e = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_e());
  }

  if (_internal_has_a()) {
    // required int32 a = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
  }

  return total_size;
}
size_t AMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.protobuf.cpp.AMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required bytes e = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_e());

    // required int32 a = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 c = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->c_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_c_size());
    total_size += data_size;
  }

  // repeated string d = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(d_.size());
  for (int i = 0, n = d_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      d_.Get(i));
  }

  // repeated .test.protobuf.cpp.Submessage2 g = 7;
  total_size += 1UL * this->_internal_g_size();
  for (const auto& msg : this->g_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .test.protobuf.cpp.Submessage1 f = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f_);
  }

  // optional int32 b = 2;
  if (cached_has_bits & 0x00000008u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_b());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AMessage::GetClassData() const { return &_class_data_; }

void AMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AMessage *>(to)->MergeFrom(
      static_cast<const AMessage &>(from));
}


void AMessage::MergeFrom(const AMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.protobuf.cpp.AMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  c_.MergeFrom(from.c_);
  d_.MergeFrom(from.d_);
  g_.MergeFrom(from.g_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_e(from._internal_e());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f()->::test::protobuf::cpp::Submessage1::MergeFrom(from._internal_f());
    }
    if (cached_has_bits & 0x00000004u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000008u) {
      b_ = from.b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AMessage::CopyFrom(const AMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.protobuf.cpp.AMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(g_))
    return false;
  if (_internal_has_f()) {
    if (!f_->IsInitialized()) return false;
  }
  return true;
}

void AMessage::InternalSwap(AMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  c_.InternalSwap(&other->c_);
  d_.InternalSwap(&other->d_);
  g_.InternalSwap(&other->g_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &e_, lhs_arena,
      &other->e_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AMessage, b_)
      + sizeof(AMessage::b_)
      - PROTOBUF_FIELD_OFFSET(AMessage, f_)>(
          reinterpret_cast<char*>(&f_),
          reinterpret_cast<char*>(&other->f_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_amessage_2eproto_getter, &descriptor_table_amessage_2eproto_once,
      file_level_metadata_amessage_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace cpp
}  // namespace protobuf
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::test::protobuf::cpp::Submessage1*
Arena::CreateMaybeMessage< ::test::protobuf::cpp::Submessage1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test::protobuf::cpp::Submessage1 >(arena);
}
template<> PROTOBUF_NOINLINE ::test::protobuf::cpp::Submessage2*
Arena::CreateMaybeMessage< ::test::protobuf::cpp::Submessage2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test::protobuf::cpp::Submessage2 >(arena);
}
template<> PROTOBUF_NOINLINE ::test::protobuf::cpp::AMessage*
Arena::CreateMaybeMessage< ::test::protobuf::cpp::AMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test::protobuf::cpp::AMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
