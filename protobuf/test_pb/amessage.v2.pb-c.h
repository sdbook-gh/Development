/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: amessage.v2.proto */

#ifndef PROTOBUF_C_amessage_2ev2_2eproto__INCLUDED
#define PROTOBUF_C_amessage_2ev2_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Test__Protobuf__C__Submessage1 Test__Protobuf__C__Submessage1;
typedef struct Test__Protobuf__C__Submessage2 Test__Protobuf__C__Submessage2;
typedef struct Test__Protobuf__C__AMessage Test__Protobuf__C__AMessage;
typedef struct Test__Protobuf__C__PointField Test__Protobuf__C__PointField;
typedef struct Test__Protobuf__C__PointCloud Test__Protobuf__C__PointCloud;


/* --- enums --- */


/* --- messages --- */

struct  Test__Protobuf__C__Submessage1
{
  ProtobufCMessage base;
  int32_t value;
};
#define TEST__PROTOBUF__C__SUBMESSAGE1__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&test__protobuf__c__submessage1__descriptor) \
    , 0 }


struct  Test__Protobuf__C__Submessage2
{
  ProtobufCMessage base;
  int32_t value;
};
#define TEST__PROTOBUF__C__SUBMESSAGE2__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&test__protobuf__c__submessage2__descriptor) \
    , 0 }


struct  Test__Protobuf__C__AMessage
{
  ProtobufCMessage base;
  int32_t a;
  protobuf_c_boolean has_b;
  int32_t b;
  size_t n_c;
  int32_t *c;
  size_t n_d;
  char **d;
  ProtobufCBinaryData e;
  Test__Protobuf__C__Submessage1 *f;
  size_t n_g;
  Test__Protobuf__C__Submessage2 **g;
};
#define TEST__PROTOBUF__C__AMESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&test__protobuf__c__amessage__descriptor) \
    , 0, 0, 0, 0,NULL, 0,NULL, {0,NULL}, NULL, 0,NULL }


struct  Test__Protobuf__C__PointField
{
  ProtobufCMessage base;
  protobuf_c_boolean has_time;
  uint32_t time;
  protobuf_c_boolean has_x;
  double x;
  protobuf_c_boolean has_y;
  double y;
  protobuf_c_boolean has_z;
  double z;
  protobuf_c_boolean has_distance;
  double distance;
  protobuf_c_boolean has_pitch;
  double pitch;
  protobuf_c_boolean has_yaw;
  double yaw;
  protobuf_c_boolean has_intensity;
  uint32_t intensity;
  protobuf_c_boolean has_ring;
  uint32_t ring;
};
#define TEST__PROTOBUF__C__POINT_FIELD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&test__protobuf__c__point_field__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  Test__Protobuf__C__PointCloud
{
  ProtobufCMessage base;
  /*
   * 点云二维结构高度。
   */
  protobuf_c_boolean has_height;
  uint32_t height;
  /*
   * 点云二维结构宽度，点云数量有效范围由具体传感器决定。
   */
  protobuf_c_boolean has_width;
  uint32_t width;
  /*
   * 一个点云的长度。单位：字节
   */
  protobuf_c_boolean has_point_step;
  uint32_t point_step;
  /*
   * 一行点云的长度。单位：字节
   */
  protobuf_c_boolean has_row_step;
  uint32_t row_step;
  size_t n_points;
  Test__Protobuf__C__PointField **points;
};
#define TEST__PROTOBUF__C__POINT_CLOUD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&test__protobuf__c__point_cloud__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL }


/* Test__Protobuf__C__Submessage1 methods */
void   test__protobuf__c__submessage1__init
                     (Test__Protobuf__C__Submessage1         *message);
size_t test__protobuf__c__submessage1__get_packed_size
                     (const Test__Protobuf__C__Submessage1   *message);
size_t test__protobuf__c__submessage1__pack
                     (const Test__Protobuf__C__Submessage1   *message,
                      uint8_t             *out);
size_t test__protobuf__c__submessage1__pack_to_buffer
                     (const Test__Protobuf__C__Submessage1   *message,
                      ProtobufCBuffer     *buffer);
Test__Protobuf__C__Submessage1 *
       test__protobuf__c__submessage1__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   test__protobuf__c__submessage1__free_unpacked
                     (Test__Protobuf__C__Submessage1 *message,
                      ProtobufCAllocator *allocator);
/* Test__Protobuf__C__Submessage2 methods */
void   test__protobuf__c__submessage2__init
                     (Test__Protobuf__C__Submessage2         *message);
size_t test__protobuf__c__submessage2__get_packed_size
                     (const Test__Protobuf__C__Submessage2   *message);
size_t test__protobuf__c__submessage2__pack
                     (const Test__Protobuf__C__Submessage2   *message,
                      uint8_t             *out);
size_t test__protobuf__c__submessage2__pack_to_buffer
                     (const Test__Protobuf__C__Submessage2   *message,
                      ProtobufCBuffer     *buffer);
Test__Protobuf__C__Submessage2 *
       test__protobuf__c__submessage2__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   test__protobuf__c__submessage2__free_unpacked
                     (Test__Protobuf__C__Submessage2 *message,
                      ProtobufCAllocator *allocator);
/* Test__Protobuf__C__AMessage methods */
void   test__protobuf__c__amessage__init
                     (Test__Protobuf__C__AMessage         *message);
size_t test__protobuf__c__amessage__get_packed_size
                     (const Test__Protobuf__C__AMessage   *message);
size_t test__protobuf__c__amessage__pack
                     (const Test__Protobuf__C__AMessage   *message,
                      uint8_t             *out);
size_t test__protobuf__c__amessage__pack_to_buffer
                     (const Test__Protobuf__C__AMessage   *message,
                      ProtobufCBuffer     *buffer);
Test__Protobuf__C__AMessage *
       test__protobuf__c__amessage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   test__protobuf__c__amessage__free_unpacked
                     (Test__Protobuf__C__AMessage *message,
                      ProtobufCAllocator *allocator);
/* Test__Protobuf__C__PointField methods */
void   test__protobuf__c__point_field__init
                     (Test__Protobuf__C__PointField         *message);
size_t test__protobuf__c__point_field__get_packed_size
                     (const Test__Protobuf__C__PointField   *message);
size_t test__protobuf__c__point_field__pack
                     (const Test__Protobuf__C__PointField   *message,
                      uint8_t             *out);
size_t test__protobuf__c__point_field__pack_to_buffer
                     (const Test__Protobuf__C__PointField   *message,
                      ProtobufCBuffer     *buffer);
Test__Protobuf__C__PointField *
       test__protobuf__c__point_field__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   test__protobuf__c__point_field__free_unpacked
                     (Test__Protobuf__C__PointField *message,
                      ProtobufCAllocator *allocator);
/* Test__Protobuf__C__PointCloud methods */
void   test__protobuf__c__point_cloud__init
                     (Test__Protobuf__C__PointCloud         *message);
size_t test__protobuf__c__point_cloud__get_packed_size
                     (const Test__Protobuf__C__PointCloud   *message);
size_t test__protobuf__c__point_cloud__pack
                     (const Test__Protobuf__C__PointCloud   *message,
                      uint8_t             *out);
size_t test__protobuf__c__point_cloud__pack_to_buffer
                     (const Test__Protobuf__C__PointCloud   *message,
                      ProtobufCBuffer     *buffer);
Test__Protobuf__C__PointCloud *
       test__protobuf__c__point_cloud__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   test__protobuf__c__point_cloud__free_unpacked
                     (Test__Protobuf__C__PointCloud *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Test__Protobuf__C__Submessage1_Closure)
                 (const Test__Protobuf__C__Submessage1 *message,
                  void *closure_data);
typedef void (*Test__Protobuf__C__Submessage2_Closure)
                 (const Test__Protobuf__C__Submessage2 *message,
                  void *closure_data);
typedef void (*Test__Protobuf__C__AMessage_Closure)
                 (const Test__Protobuf__C__AMessage *message,
                  void *closure_data);
typedef void (*Test__Protobuf__C__PointField_Closure)
                 (const Test__Protobuf__C__PointField *message,
                  void *closure_data);
typedef void (*Test__Protobuf__C__PointCloud_Closure)
                 (const Test__Protobuf__C__PointCloud *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor test__protobuf__c__submessage1__descriptor;
extern const ProtobufCMessageDescriptor test__protobuf__c__submessage2__descriptor;
extern const ProtobufCMessageDescriptor test__protobuf__c__amessage__descriptor;
extern const ProtobufCMessageDescriptor test__protobuf__c__point_field__descriptor;
extern const ProtobufCMessageDescriptor test__protobuf__c__point_cloud__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_amessage_2ev2_2eproto__INCLUDED */
