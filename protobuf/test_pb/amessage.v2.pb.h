// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: amessage.v2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_amessage_2ev2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_amessage_2ev2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_amessage_2ev2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_amessage_2ev2_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_amessage_2ev2_2eproto;
namespace test {
namespace protobuf {
namespace cpp {
class AMessage;
struct AMessageDefaultTypeInternal;
extern AMessageDefaultTypeInternal _AMessage_default_instance_;
class PointCloud;
struct PointCloudDefaultTypeInternal;
extern PointCloudDefaultTypeInternal _PointCloud_default_instance_;
class PointField;
struct PointFieldDefaultTypeInternal;
extern PointFieldDefaultTypeInternal _PointField_default_instance_;
class Submessage1;
struct Submessage1DefaultTypeInternal;
extern Submessage1DefaultTypeInternal _Submessage1_default_instance_;
class Submessage2;
struct Submessage2DefaultTypeInternal;
extern Submessage2DefaultTypeInternal _Submessage2_default_instance_;
}  // namespace cpp
}  // namespace protobuf
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> ::test::protobuf::cpp::AMessage* Arena::CreateMaybeMessage<::test::protobuf::cpp::AMessage>(Arena*);
template<> ::test::protobuf::cpp::PointCloud* Arena::CreateMaybeMessage<::test::protobuf::cpp::PointCloud>(Arena*);
template<> ::test::protobuf::cpp::PointField* Arena::CreateMaybeMessage<::test::protobuf::cpp::PointField>(Arena*);
template<> ::test::protobuf::cpp::Submessage1* Arena::CreateMaybeMessage<::test::protobuf::cpp::Submessage1>(Arena*);
template<> ::test::protobuf::cpp::Submessage2* Arena::CreateMaybeMessage<::test::protobuf::cpp::Submessage2>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test {
namespace protobuf {
namespace cpp {

// ===================================================================

class Submessage1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.protobuf.cpp.Submessage1) */ {
 public:
  inline Submessage1() : Submessage1(nullptr) {}
  ~Submessage1() override;
  explicit PROTOBUF_CONSTEXPR Submessage1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Submessage1(const Submessage1& from);
  Submessage1(Submessage1&& from) noexcept
    : Submessage1() {
    *this = ::std::move(from);
  }

  inline Submessage1& operator=(const Submessage1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Submessage1& operator=(Submessage1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Submessage1& default_instance() {
    return *internal_default_instance();
  }
  static inline const Submessage1* internal_default_instance() {
    return reinterpret_cast<const Submessage1*>(
               &_Submessage1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Submessage1& a, Submessage1& b) {
    a.Swap(&b);
  }
  inline void Swap(Submessage1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Submessage1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Submessage1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Submessage1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Submessage1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Submessage1& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Submessage1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.protobuf.cpp.Submessage1";
  }
  protected:
  explicit Submessage1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // required int32 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:test.protobuf.cpp.Submessage1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t value_;
  friend struct ::TableStruct_amessage_2ev2_2eproto;
};
// -------------------------------------------------------------------

class Submessage2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.protobuf.cpp.Submessage2) */ {
 public:
  inline Submessage2() : Submessage2(nullptr) {}
  ~Submessage2() override;
  explicit PROTOBUF_CONSTEXPR Submessage2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Submessage2(const Submessage2& from);
  Submessage2(Submessage2&& from) noexcept
    : Submessage2() {
    *this = ::std::move(from);
  }

  inline Submessage2& operator=(const Submessage2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Submessage2& operator=(Submessage2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Submessage2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Submessage2* internal_default_instance() {
    return reinterpret_cast<const Submessage2*>(
               &_Submessage2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Submessage2& a, Submessage2& b) {
    a.Swap(&b);
  }
  inline void Swap(Submessage2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Submessage2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Submessage2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Submessage2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Submessage2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Submessage2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Submessage2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.protobuf.cpp.Submessage2";
  }
  protected:
  explicit Submessage2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // required int32 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:test.protobuf.cpp.Submessage2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t value_;
  friend struct ::TableStruct_amessage_2ev2_2eproto;
};
// -------------------------------------------------------------------

class AMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.protobuf.cpp.AMessage) */ {
 public:
  inline AMessage() : AMessage(nullptr) {}
  ~AMessage() override;
  explicit PROTOBUF_CONSTEXPR AMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AMessage(const AMessage& from);
  AMessage(AMessage&& from) noexcept
    : AMessage() {
    *this = ::std::move(from);
  }

  inline AMessage& operator=(const AMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AMessage& operator=(AMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AMessage* internal_default_instance() {
    return reinterpret_cast<const AMessage*>(
               &_AMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AMessage& a, AMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.protobuf.cpp.AMessage";
  }
  protected:
  explicit AMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCFieldNumber = 3,
    kDFieldNumber = 4,
    kGFieldNumber = 7,
    kEFieldNumber = 5,
    kFFieldNumber = 6,
    kAFieldNumber = 1,
    kBFieldNumber = 2,
  };
  // repeated int32 c = 3;
  int c_size() const;
  private:
  int _internal_c_size() const;
  public:
  void clear_c();
  private:
  int32_t _internal_c(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_c() const;
  void _internal_add_c(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_c();
  public:
  int32_t c(int index) const;
  void set_c(int index, int32_t value);
  void add_c(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      c() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_c();

  // repeated string d = 4;
  int d_size() const;
  private:
  int _internal_d_size() const;
  public:
  void clear_d();
  const std::string& d(int index) const;
  std::string* mutable_d(int index);
  void set_d(int index, const std::string& value);
  void set_d(int index, std::string&& value);
  void set_d(int index, const char* value);
  void set_d(int index, const char* value, size_t size);
  std::string* add_d();
  void add_d(const std::string& value);
  void add_d(std::string&& value);
  void add_d(const char* value);
  void add_d(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& d() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_d();
  private:
  const std::string& _internal_d(int index) const;
  std::string* _internal_add_d();
  public:

  // repeated .test.protobuf.cpp.Submessage2 g = 7;
  int g_size() const;
  private:
  int _internal_g_size() const;
  public:
  void clear_g();
  ::test::protobuf::cpp::Submessage2* mutable_g(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::protobuf::cpp::Submessage2 >*
      mutable_g();
  private:
  const ::test::protobuf::cpp::Submessage2& _internal_g(int index) const;
  ::test::protobuf::cpp::Submessage2* _internal_add_g();
  public:
  const ::test::protobuf::cpp::Submessage2& g(int index) const;
  ::test::protobuf::cpp::Submessage2* add_g();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::protobuf::cpp::Submessage2 >&
      g() const;

  // required bytes e = 5;
  bool has_e() const;
  private:
  bool _internal_has_e() const;
  public:
  void clear_e();
  const std::string& e() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_e(ArgT0&& arg0, ArgT... args);
  std::string* mutable_e();
  PROTOBUF_NODISCARD std::string* release_e();
  void set_allocated_e(std::string* e);
  private:
  const std::string& _internal_e() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_e(const std::string& value);
  std::string* _internal_mutable_e();
  public:

  // optional .test.protobuf.cpp.Submessage1 f = 6;
  bool has_f() const;
  private:
  bool _internal_has_f() const;
  public:
  void clear_f();
  const ::test::protobuf::cpp::Submessage1& f() const;
  PROTOBUF_NODISCARD ::test::protobuf::cpp::Submessage1* release_f();
  ::test::protobuf::cpp::Submessage1* mutable_f();
  void set_allocated_f(::test::protobuf::cpp::Submessage1* f);
  private:
  const ::test::protobuf::cpp::Submessage1& _internal_f() const;
  ::test::protobuf::cpp::Submessage1* _internal_mutable_f();
  public:
  void unsafe_arena_set_allocated_f(
      ::test::protobuf::cpp::Submessage1* f);
  ::test::protobuf::cpp::Submessage1* unsafe_arena_release_f();

  // required int32 a = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // optional int32 b = 2;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  int32_t b() const;
  void set_b(int32_t value);
  private:
  int32_t _internal_b() const;
  void _internal_set_b(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:test.protobuf.cpp.AMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > c_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> d_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::protobuf::cpp::Submessage2 > g_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr e_;
  ::test::protobuf::cpp::Submessage1* f_;
  int32_t a_;
  int32_t b_;
  friend struct ::TableStruct_amessage_2ev2_2eproto;
};
// -------------------------------------------------------------------

class PointField final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.protobuf.cpp.PointField) */ {
 public:
  inline PointField() : PointField(nullptr) {}
  ~PointField() override;
  explicit PROTOBUF_CONSTEXPR PointField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointField(const PointField& from);
  PointField(PointField&& from) noexcept
    : PointField() {
    *this = ::std::move(from);
  }

  inline PointField& operator=(const PointField& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointField& operator=(PointField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointField& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointField* internal_default_instance() {
    return reinterpret_cast<const PointField*>(
               &_PointField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PointField& a, PointField& b) {
    a.Swap(&b);
  }
  inline void Swap(PointField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PointField>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PointField& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PointField& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointField* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.protobuf.cpp.PointField";
  }
  protected:
  explicit PointField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kTimeFieldNumber = 1,
    kIntensityFieldNumber = 8,
    kDistanceFieldNumber = 5,
    kPitchFieldNumber = 6,
    kYawFieldNumber = 7,
    kRingFieldNumber = 9,
  };
  // optional double x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 4;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // optional uint32 time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // optional uint32 intensity = 8;
  bool has_intensity() const;
  private:
  bool _internal_has_intensity() const;
  public:
  void clear_intensity();
  uint32_t intensity() const;
  void set_intensity(uint32_t value);
  private:
  uint32_t _internal_intensity() const;
  void _internal_set_intensity(uint32_t value);
  public:

  // optional double distance = 5;
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // optional double pitch = 6;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // optional double yaw = 7;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // optional uint32 ring = 9;
  bool has_ring() const;
  private:
  bool _internal_has_ring() const;
  public:
  void clear_ring();
  uint32_t ring() const;
  void set_ring(uint32_t value);
  private:
  uint32_t _internal_ring() const;
  void _internal_set_ring(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:test.protobuf.cpp.PointField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  uint32_t time_;
  uint32_t intensity_;
  double distance_;
  double pitch_;
  double yaw_;
  uint32_t ring_;
  friend struct ::TableStruct_amessage_2ev2_2eproto;
};
// -------------------------------------------------------------------

class PointCloud final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.protobuf.cpp.PointCloud) */ {
 public:
  inline PointCloud() : PointCloud(nullptr) {}
  ~PointCloud() override;
  explicit PROTOBUF_CONSTEXPR PointCloud(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointCloud(const PointCloud& from);
  PointCloud(PointCloud&& from) noexcept
    : PointCloud() {
    *this = ::std::move(from);
  }

  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud& operator=(PointCloud&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointCloud& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointCloud* internal_default_instance() {
    return reinterpret_cast<const PointCloud*>(
               &_PointCloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PointCloud& a, PointCloud& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointCloud* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PointCloud>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PointCloud& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PointCloud& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.protobuf.cpp.PointCloud";
  }
  protected:
  explicit PointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 5,
    kHeightFieldNumber = 1,
    kWidthFieldNumber = 2,
    kPointStepFieldNumber = 3,
    kRowStepFieldNumber = 4,
  };
  // repeated .test.protobuf.cpp.PointField points = 5;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::test::protobuf::cpp::PointField* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::protobuf::cpp::PointField >*
      mutable_points();
  private:
  const ::test::protobuf::cpp::PointField& _internal_points(int index) const;
  ::test::protobuf::cpp::PointField* _internal_add_points();
  public:
  const ::test::protobuf::cpp::PointField& points(int index) const;
  ::test::protobuf::cpp::PointField* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::protobuf::cpp::PointField >&
      points() const;

  // optional uint32 height = 1;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // optional uint32 width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // optional uint32 point_step = 3;
  bool has_point_step() const;
  private:
  bool _internal_has_point_step() const;
  public:
  void clear_point_step();
  uint32_t point_step() const;
  void set_point_step(uint32_t value);
  private:
  uint32_t _internal_point_step() const;
  void _internal_set_point_step(uint32_t value);
  public:

  // optional uint32 row_step = 4;
  bool has_row_step() const;
  private:
  bool _internal_has_row_step() const;
  public:
  void clear_row_step();
  uint32_t row_step() const;
  void set_row_step(uint32_t value);
  private:
  uint32_t _internal_row_step() const;
  void _internal_set_row_step(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:test.protobuf.cpp.PointCloud)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::protobuf::cpp::PointField > points_;
  uint32_t height_;
  uint32_t width_;
  uint32_t point_step_;
  uint32_t row_step_;
  friend struct ::TableStruct_amessage_2ev2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Submessage1

// required int32 value = 1;
inline bool Submessage1::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Submessage1::has_value() const {
  return _internal_has_value();
}
inline void Submessage1::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t Submessage1::_internal_value() const {
  return value_;
}
inline int32_t Submessage1::value() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.Submessage1.value)
  return _internal_value();
}
inline void Submessage1::_internal_set_value(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void Submessage1::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.Submessage1.value)
}

// -------------------------------------------------------------------

// Submessage2

// required int32 value = 1;
inline bool Submessage2::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Submessage2::has_value() const {
  return _internal_has_value();
}
inline void Submessage2::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t Submessage2::_internal_value() const {
  return value_;
}
inline int32_t Submessage2::value() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.Submessage2.value)
  return _internal_value();
}
inline void Submessage2::_internal_set_value(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void Submessage2::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.Submessage2.value)
}

// -------------------------------------------------------------------

// AMessage

// required int32 a = 1;
inline bool AMessage::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AMessage::has_a() const {
  return _internal_has_a();
}
inline void AMessage::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t AMessage::_internal_a() const {
  return a_;
}
inline int32_t AMessage::a() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.AMessage.a)
  return _internal_a();
}
inline void AMessage::_internal_set_a(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  a_ = value;
}
inline void AMessage::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.AMessage.a)
}

// optional int32 b = 2;
inline bool AMessage::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AMessage::has_b() const {
  return _internal_has_b();
}
inline void AMessage::clear_b() {
  b_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t AMessage::_internal_b() const {
  return b_;
}
inline int32_t AMessage::b() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.AMessage.b)
  return _internal_b();
}
inline void AMessage::_internal_set_b(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  b_ = value;
}
inline void AMessage::set_b(int32_t value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.AMessage.b)
}

// repeated int32 c = 3;
inline int AMessage::_internal_c_size() const {
  return c_.size();
}
inline int AMessage::c_size() const {
  return _internal_c_size();
}
inline void AMessage::clear_c() {
  c_.Clear();
}
inline int32_t AMessage::_internal_c(int index) const {
  return c_.Get(index);
}
inline int32_t AMessage::c(int index) const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.AMessage.c)
  return _internal_c(index);
}
inline void AMessage::set_c(int index, int32_t value) {
  c_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.AMessage.c)
}
inline void AMessage::_internal_add_c(int32_t value) {
  c_.Add(value);
}
inline void AMessage::add_c(int32_t value) {
  _internal_add_c(value);
  // @@protoc_insertion_point(field_add:test.protobuf.cpp.AMessage.c)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AMessage::_internal_c() const {
  return c_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AMessage::c() const {
  // @@protoc_insertion_point(field_list:test.protobuf.cpp.AMessage.c)
  return _internal_c();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AMessage::_internal_mutable_c() {
  return &c_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AMessage::mutable_c() {
  // @@protoc_insertion_point(field_mutable_list:test.protobuf.cpp.AMessage.c)
  return _internal_mutable_c();
}

// repeated string d = 4;
inline int AMessage::_internal_d_size() const {
  return d_.size();
}
inline int AMessage::d_size() const {
  return _internal_d_size();
}
inline void AMessage::clear_d() {
  d_.Clear();
}
inline std::string* AMessage::add_d() {
  std::string* _s = _internal_add_d();
  // @@protoc_insertion_point(field_add_mutable:test.protobuf.cpp.AMessage.d)
  return _s;
}
inline const std::string& AMessage::_internal_d(int index) const {
  return d_.Get(index);
}
inline const std::string& AMessage::d(int index) const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.AMessage.d)
  return _internal_d(index);
}
inline std::string* AMessage::mutable_d(int index) {
  // @@protoc_insertion_point(field_mutable:test.protobuf.cpp.AMessage.d)
  return d_.Mutable(index);
}
inline void AMessage::set_d(int index, const std::string& value) {
  d_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.AMessage.d)
}
inline void AMessage::set_d(int index, std::string&& value) {
  d_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.AMessage.d)
}
inline void AMessage::set_d(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  d_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test.protobuf.cpp.AMessage.d)
}
inline void AMessage::set_d(int index, const char* value, size_t size) {
  d_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.protobuf.cpp.AMessage.d)
}
inline std::string* AMessage::_internal_add_d() {
  return d_.Add();
}
inline void AMessage::add_d(const std::string& value) {
  d_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test.protobuf.cpp.AMessage.d)
}
inline void AMessage::add_d(std::string&& value) {
  d_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:test.protobuf.cpp.AMessage.d)
}
inline void AMessage::add_d(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  d_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test.protobuf.cpp.AMessage.d)
}
inline void AMessage::add_d(const char* value, size_t size) {
  d_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test.protobuf.cpp.AMessage.d)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AMessage::d() const {
  // @@protoc_insertion_point(field_list:test.protobuf.cpp.AMessage.d)
  return d_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AMessage::mutable_d() {
  // @@protoc_insertion_point(field_mutable_list:test.protobuf.cpp.AMessage.d)
  return &d_;
}

// required bytes e = 5;
inline bool AMessage::_internal_has_e() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AMessage::has_e() const {
  return _internal_has_e();
}
inline void AMessage::clear_e() {
  e_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AMessage::e() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.AMessage.e)
  return _internal_e();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AMessage::set_e(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 e_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.AMessage.e)
}
inline std::string* AMessage::mutable_e() {
  std::string* _s = _internal_mutable_e();
  // @@protoc_insertion_point(field_mutable:test.protobuf.cpp.AMessage.e)
  return _s;
}
inline const std::string& AMessage::_internal_e() const {
  return e_.Get();
}
inline void AMessage::_internal_set_e(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  e_.Set(value, GetArenaForAllocation());
}
inline std::string* AMessage::_internal_mutable_e() {
  _has_bits_[0] |= 0x00000001u;
  return e_.Mutable(GetArenaForAllocation());
}
inline std::string* AMessage::release_e() {
  // @@protoc_insertion_point(field_release:test.protobuf.cpp.AMessage.e)
  if (!_internal_has_e()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = e_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (e_.IsDefault()) {
    e_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AMessage::set_allocated_e(std::string* e) {
  if (e != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  e_.SetAllocated(e, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (e_.IsDefault()) {
    e_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test.protobuf.cpp.AMessage.e)
}

// optional .test.protobuf.cpp.Submessage1 f = 6;
inline bool AMessage::_internal_has_f() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f_ != nullptr);
  return value;
}
inline bool AMessage::has_f() const {
  return _internal_has_f();
}
inline void AMessage::clear_f() {
  if (f_ != nullptr) f_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::test::protobuf::cpp::Submessage1& AMessage::_internal_f() const {
  const ::test::protobuf::cpp::Submessage1* p = f_;
  return p != nullptr ? *p : reinterpret_cast<const ::test::protobuf::cpp::Submessage1&>(
      ::test::protobuf::cpp::_Submessage1_default_instance_);
}
inline const ::test::protobuf::cpp::Submessage1& AMessage::f() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.AMessage.f)
  return _internal_f();
}
inline void AMessage::unsafe_arena_set_allocated_f(
    ::test::protobuf::cpp::Submessage1* f) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f_);
  }
  f_ = f;
  if (f) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test.protobuf.cpp.AMessage.f)
}
inline ::test::protobuf::cpp::Submessage1* AMessage::release_f() {
  _has_bits_[0] &= ~0x00000002u;
  ::test::protobuf::cpp::Submessage1* temp = f_;
  f_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::test::protobuf::cpp::Submessage1* AMessage::unsafe_arena_release_f() {
  // @@protoc_insertion_point(field_release:test.protobuf.cpp.AMessage.f)
  _has_bits_[0] &= ~0x00000002u;
  ::test::protobuf::cpp::Submessage1* temp = f_;
  f_ = nullptr;
  return temp;
}
inline ::test::protobuf::cpp::Submessage1* AMessage::_internal_mutable_f() {
  _has_bits_[0] |= 0x00000002u;
  if (f_ == nullptr) {
    auto* p = CreateMaybeMessage<::test::protobuf::cpp::Submessage1>(GetArenaForAllocation());
    f_ = p;
  }
  return f_;
}
inline ::test::protobuf::cpp::Submessage1* AMessage::mutable_f() {
  ::test::protobuf::cpp::Submessage1* _msg = _internal_mutable_f();
  // @@protoc_insertion_point(field_mutable:test.protobuf.cpp.AMessage.f)
  return _msg;
}
inline void AMessage::set_allocated_f(::test::protobuf::cpp::Submessage1* f) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete f_;
  }
  if (f) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(f);
    if (message_arena != submessage_arena) {
      f = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f_ = f;
  // @@protoc_insertion_point(field_set_allocated:test.protobuf.cpp.AMessage.f)
}

// repeated .test.protobuf.cpp.Submessage2 g = 7;
inline int AMessage::_internal_g_size() const {
  return g_.size();
}
inline int AMessage::g_size() const {
  return _internal_g_size();
}
inline void AMessage::clear_g() {
  g_.Clear();
}
inline ::test::protobuf::cpp::Submessage2* AMessage::mutable_g(int index) {
  // @@protoc_insertion_point(field_mutable:test.protobuf.cpp.AMessage.g)
  return g_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::protobuf::cpp::Submessage2 >*
AMessage::mutable_g() {
  // @@protoc_insertion_point(field_mutable_list:test.protobuf.cpp.AMessage.g)
  return &g_;
}
inline const ::test::protobuf::cpp::Submessage2& AMessage::_internal_g(int index) const {
  return g_.Get(index);
}
inline const ::test::protobuf::cpp::Submessage2& AMessage::g(int index) const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.AMessage.g)
  return _internal_g(index);
}
inline ::test::protobuf::cpp::Submessage2* AMessage::_internal_add_g() {
  return g_.Add();
}
inline ::test::protobuf::cpp::Submessage2* AMessage::add_g() {
  ::test::protobuf::cpp::Submessage2* _add = _internal_add_g();
  // @@protoc_insertion_point(field_add:test.protobuf.cpp.AMessage.g)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::protobuf::cpp::Submessage2 >&
AMessage::g() const {
  // @@protoc_insertion_point(field_list:test.protobuf.cpp.AMessage.g)
  return g_;
}

// -------------------------------------------------------------------

// PointField

// optional uint32 time = 1;
inline bool PointField::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PointField::has_time() const {
  return _internal_has_time();
}
inline void PointField::clear_time() {
  time_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PointField::_internal_time() const {
  return time_;
}
inline uint32_t PointField::time() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointField.time)
  return _internal_time();
}
inline void PointField::_internal_set_time(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  time_ = value;
}
inline void PointField::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointField.time)
}

// optional double x = 2;
inline bool PointField::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PointField::has_x() const {
  return _internal_has_x();
}
inline void PointField::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PointField::_internal_x() const {
  return x_;
}
inline double PointField::x() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointField.x)
  return _internal_x();
}
inline void PointField::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void PointField::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointField.x)
}

// optional double y = 3;
inline bool PointField::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PointField::has_y() const {
  return _internal_has_y();
}
inline void PointField::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PointField::_internal_y() const {
  return y_;
}
inline double PointField::y() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointField.y)
  return _internal_y();
}
inline void PointField::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void PointField::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointField.y)
}

// optional double z = 4;
inline bool PointField::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PointField::has_z() const {
  return _internal_has_z();
}
inline void PointField::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PointField::_internal_z() const {
  return z_;
}
inline double PointField::z() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointField.z)
  return _internal_z();
}
inline void PointField::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void PointField::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointField.z)
}

// optional double distance = 5;
inline bool PointField::_internal_has_distance() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PointField::has_distance() const {
  return _internal_has_distance();
}
inline void PointField::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double PointField::_internal_distance() const {
  return distance_;
}
inline double PointField::distance() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointField.distance)
  return _internal_distance();
}
inline void PointField::_internal_set_distance(double value) {
  _has_bits_[0] |= 0x00000020u;
  distance_ = value;
}
inline void PointField::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointField.distance)
}

// optional double pitch = 6;
inline bool PointField::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PointField::has_pitch() const {
  return _internal_has_pitch();
}
inline void PointField::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double PointField::_internal_pitch() const {
  return pitch_;
}
inline double PointField::pitch() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointField.pitch)
  return _internal_pitch();
}
inline void PointField::_internal_set_pitch(double value) {
  _has_bits_[0] |= 0x00000040u;
  pitch_ = value;
}
inline void PointField::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointField.pitch)
}

// optional double yaw = 7;
inline bool PointField::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PointField::has_yaw() const {
  return _internal_has_yaw();
}
inline void PointField::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double PointField::_internal_yaw() const {
  return yaw_;
}
inline double PointField::yaw() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointField.yaw)
  return _internal_yaw();
}
inline void PointField::_internal_set_yaw(double value) {
  _has_bits_[0] |= 0x00000080u;
  yaw_ = value;
}
inline void PointField::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointField.yaw)
}

// optional uint32 intensity = 8;
inline bool PointField::_internal_has_intensity() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PointField::has_intensity() const {
  return _internal_has_intensity();
}
inline void PointField::clear_intensity() {
  intensity_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t PointField::_internal_intensity() const {
  return intensity_;
}
inline uint32_t PointField::intensity() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointField.intensity)
  return _internal_intensity();
}
inline void PointField::_internal_set_intensity(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  intensity_ = value;
}
inline void PointField::set_intensity(uint32_t value) {
  _internal_set_intensity(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointField.intensity)
}

// optional uint32 ring = 9;
inline bool PointField::_internal_has_ring() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PointField::has_ring() const {
  return _internal_has_ring();
}
inline void PointField::clear_ring() {
  ring_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t PointField::_internal_ring() const {
  return ring_;
}
inline uint32_t PointField::ring() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointField.ring)
  return _internal_ring();
}
inline void PointField::_internal_set_ring(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  ring_ = value;
}
inline void PointField::set_ring(uint32_t value) {
  _internal_set_ring(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointField.ring)
}

// -------------------------------------------------------------------

// PointCloud

// optional uint32 height = 1;
inline bool PointCloud::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PointCloud::has_height() const {
  return _internal_has_height();
}
inline void PointCloud::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t PointCloud::_internal_height() const {
  return height_;
}
inline uint32_t PointCloud::height() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointCloud.height)
  return _internal_height();
}
inline void PointCloud::_internal_set_height(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  height_ = value;
}
inline void PointCloud::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointCloud.height)
}

// optional uint32 width = 2;
inline bool PointCloud::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PointCloud::has_width() const {
  return _internal_has_width();
}
inline void PointCloud::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PointCloud::_internal_width() const {
  return width_;
}
inline uint32_t PointCloud::width() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointCloud.width)
  return _internal_width();
}
inline void PointCloud::_internal_set_width(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
}
inline void PointCloud::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointCloud.width)
}

// optional uint32 point_step = 3;
inline bool PointCloud::_internal_has_point_step() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PointCloud::has_point_step() const {
  return _internal_has_point_step();
}
inline void PointCloud::clear_point_step() {
  point_step_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PointCloud::_internal_point_step() const {
  return point_step_;
}
inline uint32_t PointCloud::point_step() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointCloud.point_step)
  return _internal_point_step();
}
inline void PointCloud::_internal_set_point_step(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  point_step_ = value;
}
inline void PointCloud::set_point_step(uint32_t value) {
  _internal_set_point_step(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointCloud.point_step)
}

// optional uint32 row_step = 4;
inline bool PointCloud::_internal_has_row_step() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PointCloud::has_row_step() const {
  return _internal_has_row_step();
}
inline void PointCloud::clear_row_step() {
  row_step_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PointCloud::_internal_row_step() const {
  return row_step_;
}
inline uint32_t PointCloud::row_step() const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointCloud.row_step)
  return _internal_row_step();
}
inline void PointCloud::_internal_set_row_step(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  row_step_ = value;
}
inline void PointCloud::set_row_step(uint32_t value) {
  _internal_set_row_step(value);
  // @@protoc_insertion_point(field_set:test.protobuf.cpp.PointCloud.row_step)
}

// repeated .test.protobuf.cpp.PointField points = 5;
inline int PointCloud::_internal_points_size() const {
  return points_.size();
}
inline int PointCloud::points_size() const {
  return _internal_points_size();
}
inline void PointCloud::clear_points() {
  points_.Clear();
}
inline ::test::protobuf::cpp::PointField* PointCloud::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:test.protobuf.cpp.PointCloud.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::protobuf::cpp::PointField >*
PointCloud::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:test.protobuf.cpp.PointCloud.points)
  return &points_;
}
inline const ::test::protobuf::cpp::PointField& PointCloud::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::test::protobuf::cpp::PointField& PointCloud::points(int index) const {
  // @@protoc_insertion_point(field_get:test.protobuf.cpp.PointCloud.points)
  return _internal_points(index);
}
inline ::test::protobuf::cpp::PointField* PointCloud::_internal_add_points() {
  return points_.Add();
}
inline ::test::protobuf::cpp::PointField* PointCloud::add_points() {
  ::test::protobuf::cpp::PointField* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:test.protobuf.cpp.PointCloud.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::protobuf::cpp::PointField >&
PointCloud::points() const {
  // @@protoc_insertion_point(field_list:test.protobuf.cpp.PointCloud.points)
  return points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cpp
}  // namespace protobuf
}  // namespace test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_amessage_2ev2_2eproto
