cmake_minimum_required(VERSION 3.10)
set(COMPONENT_NAME "sender_component")
set(COMPONENT_PRIVATE_PROTO "${CMAKE_CURRENT_LIST_DIR}/proto")
set(EC_PROTOC "/ec_workspace/dep_lib/protoc")
function(gen_proto IN_PATH OUT_PATH)
  file(GLOB PROTOS "${IN_PATH}/*.proto")
  foreach (_proto ${PROTOS})
    message("invoke protoc for ${_proto}")
    execute_process(COMMAND bash -c "${EC_PROTOC} --cpp_out=${OUT_PATH} --proto_path=${IN_PATH} ${_proto}"
                    RESULT_VARIABLE result_var
                    OUTPUT_VARIABLE output_var
                    ERROR_VARIABLE error_var)
    if (NOT ${result_var} MATCHES "0")
      message(STATUS "protoc output:${output_var}")
      message(STATUS "protoc error:${error_var}")
    else()
      message(STATUS "protoc ok")
    endif()
  endforeach()
endfunction()
project("${COMPONENT_NAME}")
gen_proto("${COMPONENT_PRIVATE_PROTO}" "${COMPONENT_PRIVATE_PROTO}")
file(GLOB COMPONENT_PRIVATE_SRCS "${CMAKE_CURRENT_LIST_DIR}/*.cc" "${CMAKE_CURRENT_LIST_DIR}/**/*.cc")
message(STATUS "build ${COMPONENT_NAME}")
add_library(${COMPONENT_NAME} SHARED ${COMPONENT_PRIVATE_SRCS})
target_include_directories(${COMPONENT_NAME} PUBLIC "/ec_workspace/dep_lib/include" "/ec_workspace")
install(TARGETS ${COMPONENT_NAME} DESTINATION ${CMAKE_CURRENT_LIST_DIR})
