// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sender.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sender_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sender_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sender_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sender_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sender_2eproto;
namespace apollo {
class CarMsg;
class CarMsgDefaultTypeInternal;
extern CarMsgDefaultTypeInternal _CarMsg_default_instance_;
class SenderConfig;
class SenderConfigDefaultTypeInternal;
extern SenderConfigDefaultTypeInternal _SenderConfig_default_instance_;
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::CarMsg* Arena::CreateMaybeMessage<::apollo::CarMsg>(Arena*);
template<> ::apollo::SenderConfig* Arena::CreateMaybeMessage<::apollo::SenderConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {

// ===================================================================

class CarMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.CarMsg) */ {
 public:
  inline CarMsg() : CarMsg(nullptr) {}
  virtual ~CarMsg();

  CarMsg(const CarMsg& from);
  CarMsg(CarMsg&& from) noexcept
    : CarMsg() {
    *this = ::std::move(from);
  }

  inline CarMsg& operator=(const CarMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarMsg& operator=(CarMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CarMsg& default_instance();

  static inline const CarMsg* internal_default_instance() {
    return reinterpret_cast<const CarMsg*>(
               &_CarMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CarMsg& a, CarMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CarMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CarMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CarMsg* New() const final {
    return CreateMaybeMessage<CarMsg>(nullptr);
  }

  CarMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CarMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CarMsg& from);
  void MergeFrom(const CarMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.CarMsg";
  }
  protected:
  explicit CarMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sender_2eproto);
    return ::descriptor_table_sender_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlateFieldNumber = 1,
    kTypeFieldNumber = 2,
    kOwnerFieldNumber = 3,
    kKilometersFieldNumber = 4,
    kSpeedFieldNumber = 5,
  };
  // optional string plate = 1;
  bool has_plate() const;
  private:
  bool _internal_has_plate() const;
  public:
  void clear_plate();
  const std::string& plate() const;
  void set_plate(const std::string& value);
  void set_plate(std::string&& value);
  void set_plate(const char* value);
  void set_plate(const char* value, size_t size);
  std::string* mutable_plate();
  std::string* release_plate();
  void set_allocated_plate(std::string* plate);
  private:
  const std::string& _internal_plate() const;
  void _internal_set_plate(const std::string& value);
  std::string* _internal_mutable_plate();
  public:

  // optional string type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string owner = 3;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // optional uint64 kilometers = 4;
  bool has_kilometers() const;
  private:
  bool _internal_has_kilometers() const;
  public:
  void clear_kilometers();
  ::PROTOBUF_NAMESPACE_ID::uint64 kilometers() const;
  void set_kilometers(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_kilometers() const;
  void _internal_set_kilometers(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 speed = 5;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::uint64 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.CarMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::uint64 kilometers_;
  ::PROTOBUF_NAMESPACE_ID::uint64 speed_;
  friend struct ::TableStruct_sender_2eproto;
};
// -------------------------------------------------------------------

class SenderConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.SenderConfig) */ {
 public:
  inline SenderConfig() : SenderConfig(nullptr) {}
  virtual ~SenderConfig();

  SenderConfig(const SenderConfig& from);
  SenderConfig(SenderConfig&& from) noexcept
    : SenderConfig() {
    *this = ::std::move(from);
  }

  inline SenderConfig& operator=(const SenderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SenderConfig& operator=(SenderConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SenderConfig& default_instance();

  static inline const SenderConfig* internal_default_instance() {
    return reinterpret_cast<const SenderConfig*>(
               &_SenderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SenderConfig& a, SenderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SenderConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SenderConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SenderConfig* New() const final {
    return CreateMaybeMessage<SenderConfig>(nullptr);
  }

  SenderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SenderConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SenderConfig& from);
  void MergeFrom(const SenderConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SenderConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.SenderConfig";
  }
  protected:
  explicit SenderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sender_2eproto);
    return ::descriptor_table_sender_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSenderTopicFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string sender_topic = 2;
  bool has_sender_topic() const;
  private:
  bool _internal_has_sender_topic() const;
  public:
  void clear_sender_topic();
  const std::string& sender_topic() const;
  void set_sender_topic(const std::string& value);
  void set_sender_topic(std::string&& value);
  void set_sender_topic(const char* value);
  void set_sender_topic(const char* value, size_t size);
  std::string* mutable_sender_topic();
  std::string* release_sender_topic();
  void set_allocated_sender_topic(std::string* sender_topic);
  private:
  const std::string& _internal_sender_topic() const;
  void _internal_set_sender_topic(const std::string& value);
  std::string* _internal_mutable_sender_topic();
  public:

  // @@protoc_insertion_point(class_scope:apollo.SenderConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_topic_;
  friend struct ::TableStruct_sender_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CarMsg

// optional string plate = 1;
inline bool CarMsg::_internal_has_plate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CarMsg::has_plate() const {
  return _internal_has_plate();
}
inline void CarMsg::clear_plate() {
  plate_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CarMsg::plate() const {
  // @@protoc_insertion_point(field_get:apollo.CarMsg.plate)
  return _internal_plate();
}
inline void CarMsg::set_plate(const std::string& value) {
  _internal_set_plate(value);
  // @@protoc_insertion_point(field_set:apollo.CarMsg.plate)
}
inline std::string* CarMsg::mutable_plate() {
  // @@protoc_insertion_point(field_mutable:apollo.CarMsg.plate)
  return _internal_mutable_plate();
}
inline const std::string& CarMsg::_internal_plate() const {
  return plate_.Get();
}
inline void CarMsg::_internal_set_plate(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  plate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CarMsg::set_plate(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  plate_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.CarMsg.plate)
}
inline void CarMsg::set_plate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  plate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.CarMsg.plate)
}
inline void CarMsg::set_plate(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  plate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.CarMsg.plate)
}
inline std::string* CarMsg::_internal_mutable_plate() {
  _has_bits_[0] |= 0x00000001u;
  return plate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CarMsg::release_plate() {
  // @@protoc_insertion_point(field_release:apollo.CarMsg.plate)
  if (!_internal_has_plate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return plate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CarMsg::set_allocated_plate(std::string* plate) {
  if (plate != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  plate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.CarMsg.plate)
}

// optional string type = 2;
inline bool CarMsg::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CarMsg::has_type() const {
  return _internal_has_type();
}
inline void CarMsg::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CarMsg::type() const {
  // @@protoc_insertion_point(field_get:apollo.CarMsg.type)
  return _internal_type();
}
inline void CarMsg::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.CarMsg.type)
}
inline std::string* CarMsg::mutable_type() {
  // @@protoc_insertion_point(field_mutable:apollo.CarMsg.type)
  return _internal_mutable_type();
}
inline const std::string& CarMsg::_internal_type() const {
  return type_.Get();
}
inline void CarMsg::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CarMsg::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.CarMsg.type)
}
inline void CarMsg::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.CarMsg.type)
}
inline void CarMsg::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.CarMsg.type)
}
inline std::string* CarMsg::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CarMsg::release_type() {
  // @@protoc_insertion_point(field_release:apollo.CarMsg.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CarMsg::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.CarMsg.type)
}

// optional string owner = 3;
inline bool CarMsg::_internal_has_owner() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CarMsg::has_owner() const {
  return _internal_has_owner();
}
inline void CarMsg::clear_owner() {
  owner_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CarMsg::owner() const {
  // @@protoc_insertion_point(field_get:apollo.CarMsg.owner)
  return _internal_owner();
}
inline void CarMsg::set_owner(const std::string& value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:apollo.CarMsg.owner)
}
inline std::string* CarMsg::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:apollo.CarMsg.owner)
  return _internal_mutable_owner();
}
inline const std::string& CarMsg::_internal_owner() const {
  return owner_.Get();
}
inline void CarMsg::_internal_set_owner(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CarMsg::set_owner(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  owner_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.CarMsg.owner)
}
inline void CarMsg::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.CarMsg.owner)
}
inline void CarMsg::set_owner(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.CarMsg.owner)
}
inline std::string* CarMsg::_internal_mutable_owner() {
  _has_bits_[0] |= 0x00000004u;
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CarMsg::release_owner() {
  // @@protoc_insertion_point(field_release:apollo.CarMsg.owner)
  if (!_internal_has_owner()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return owner_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CarMsg::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.CarMsg.owner)
}

// optional uint64 kilometers = 4;
inline bool CarMsg::_internal_has_kilometers() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CarMsg::has_kilometers() const {
  return _internal_has_kilometers();
}
inline void CarMsg::clear_kilometers() {
  kilometers_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CarMsg::_internal_kilometers() const {
  return kilometers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CarMsg::kilometers() const {
  // @@protoc_insertion_point(field_get:apollo.CarMsg.kilometers)
  return _internal_kilometers();
}
inline void CarMsg::_internal_set_kilometers(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  kilometers_ = value;
}
inline void CarMsg::set_kilometers(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_kilometers(value);
  // @@protoc_insertion_point(field_set:apollo.CarMsg.kilometers)
}

// optional uint64 speed = 5;
inline bool CarMsg::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CarMsg::has_speed() const {
  return _internal_has_speed();
}
inline void CarMsg::clear_speed() {
  speed_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CarMsg::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CarMsg::speed() const {
  // @@protoc_insertion_point(field_get:apollo.CarMsg.speed)
  return _internal_speed();
}
inline void CarMsg::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  speed_ = value;
}
inline void CarMsg::set_speed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:apollo.CarMsg.speed)
}

// -------------------------------------------------------------------

// SenderConfig

// optional string name = 1;
inline bool SenderConfig::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SenderConfig::has_name() const {
  return _internal_has_name();
}
inline void SenderConfig::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SenderConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.SenderConfig.name)
  return _internal_name();
}
inline void SenderConfig::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apollo.SenderConfig.name)
}
inline std::string* SenderConfig::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apollo.SenderConfig.name)
  return _internal_mutable_name();
}
inline const std::string& SenderConfig::_internal_name() const {
  return name_.Get();
}
inline void SenderConfig::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SenderConfig::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.SenderConfig.name)
}
inline void SenderConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.SenderConfig.name)
}
inline void SenderConfig::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.SenderConfig.name)
}
inline std::string* SenderConfig::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SenderConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.SenderConfig.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SenderConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.SenderConfig.name)
}

// optional string sender_topic = 2;
inline bool SenderConfig::_internal_has_sender_topic() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SenderConfig::has_sender_topic() const {
  return _internal_has_sender_topic();
}
inline void SenderConfig::clear_sender_topic() {
  sender_topic_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SenderConfig::sender_topic() const {
  // @@protoc_insertion_point(field_get:apollo.SenderConfig.sender_topic)
  return _internal_sender_topic();
}
inline void SenderConfig::set_sender_topic(const std::string& value) {
  _internal_set_sender_topic(value);
  // @@protoc_insertion_point(field_set:apollo.SenderConfig.sender_topic)
}
inline std::string* SenderConfig::mutable_sender_topic() {
  // @@protoc_insertion_point(field_mutable:apollo.SenderConfig.sender_topic)
  return _internal_mutable_sender_topic();
}
inline const std::string& SenderConfig::_internal_sender_topic() const {
  return sender_topic_.Get();
}
inline void SenderConfig::_internal_set_sender_topic(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SenderConfig::set_sender_topic(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_topic_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.SenderConfig.sender_topic)
}
inline void SenderConfig::set_sender_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sender_topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.SenderConfig.sender_topic)
}
inline void SenderConfig::set_sender_topic(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sender_topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.SenderConfig.sender_topic)
}
inline std::string* SenderConfig::_internal_mutable_sender_topic() {
  _has_bits_[0] |= 0x00000002u;
  return sender_topic_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SenderConfig::release_sender_topic() {
  // @@protoc_insertion_point(field_release:apollo.SenderConfig.sender_topic)
  if (!_internal_has_sender_topic()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sender_topic_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SenderConfig::set_allocated_sender_topic(std::string* sender_topic) {
  if (sender_topic != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sender_topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_topic,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.SenderConfig.sender_topic)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sender_2eproto
